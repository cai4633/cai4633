<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>web性能优化</title>
      <link href="2021/01/03/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>2021/01/03/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/web_performance_optimization.png" alt><br>一个前端开发必定绕不开<strong>性能优化</strong>这个话题。web 性能优化通俗的讲就是让页面尽快呈现在用户眼前。要想解决性能优化这个难题必须提前了解<a href="/2020/04/19/浏览器输入URL到页面显示全过程/">浏览器从输入 URL 到渲染页面的整个过程</a>。简单的来说 web 性能优化主要从以下几个方面入手：</p><ol><li>DNS 查询过程</li><li>HTTP 请求过程</li><li>资源下载过程</li><li>浏览器渲染过程</li><li>缓存过程</li></ol><h2 id="一、DNS-查询优化"><a href="#一、DNS-查询优化" class="headerlink" title="一、DNS 查询优化"></a>一、DNS 查询优化</h2><p>浏览器地址栏输入 URL 发送出去后，域名会通过 DNS 服务器进行域名解析并返回对应的 IP 地址。这个过程通常比较快，但是也可以有优化的空间。</p><h3 id="DNS-缓存"><a href="#DNS-缓存" class="headerlink" title="DNS 缓存"></a>DNS 缓存</h3><p>DNS 缓存一般都是浏览器等自动缓存的。但是了解其相应的过程还是必要的。DNS 解析首先查询<strong>浏览器缓存</strong>，然后查询操作系统<strong>HOSTS 文件</strong>，再查询<strong>路由器缓存</strong>，如果无法找到缓存才正式向<strong>本地 DNS 服务器</strong> 或者<strong>根服务器</strong>逐级请求解析。这其中我们可以<strong>更改 hosts</strong> 加快解析速度，但是我们不能指望每个用户都会改 hosts。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>如果同一台服务器同时链接的用户数过大时，服务器可能会崩溃。解决办法就是 DNS 负载均衡技术。原理是在 DNS 服务器中为同一个域名配置多个 IP 地址,在应答 DNS 查询时,根据服务器的负载量以及离用户的距离等返回不同的解析结果,将客户端的访问引导到不同的服务器上,从而达到负载均衡的目的｡例如 <strong>CDN 节点</strong>。</p><h3 id="DNS-预获取"><a href="#DNS-预获取" class="headerlink" title="DNS 预获取"></a>DNS 预获取</h3><p>现代浏览器默认会对页面中和当前域名（正在浏览网页的域名）不在同一个域的域名进行预获取，并且缓存结果，这就是隐式的 DNS Prefetch。如果想对页面中没有出现的域进行预获取，那么就要使用显式的 <strong>dns-prefetch</strong> 了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 打开dns-prefetch --&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//www.baidu.com&quot;&gt;</span><br><span class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//zhihu.com&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 关闭dns-prefetch 禁止隐式dns预获取 --&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;off&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="二、http-请求优化"><a href="#二、http-请求优化" class="headerlink" title="二、http 请求优化"></a>二、http 请求优化</h2><p>当域名解析成功后，浏览器就会和对应的服务器建立 TCP 连接，并发送 http 请求。http 请求可以优化的地方也有很多。</p><h3 id="减少-http-请求数"><a href="#减少-http-请求数" class="headerlink" title="减少 http 请求数"></a>减少 http 请求数</h3><p>能合并的文件<strong>尽量合并</strong>，比如使用雪碧图等都可以有效减少 http 请求数。</p><h3 id="TCP-连接复用-keep-alive"><a href="#TCP-连接复用-keep-alive" class="headerlink" title="TCP 连接复用 (keep-alive)"></a>TCP 连接复用 (keep-alive)</h3><p>HTTP 协议采用“请求-应答”模式。http1.0 时代，客户端每次请求都要和服务器新建一个 TCP 连接，完成之后立即断开连接。而使用 Keep-Alive 模式会使客户端到服务器端的 TCP 连接持续有效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 启用Keep-Alive --&gt;</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure><p>HTTP 1.1 时代，默认开启 Keep-Alive 模式，只有加入 <code>Connection: close</code>才关闭连接。Keep-Alive 模式的属性可以设置 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- timeout=6 表示这个 TCP 通道可以保持 6 秒，max=50 表示这个长连接最多接收 50 次请求就断开 --&gt;</span><br><span class="line">Keep-Alive: timeout=6, max=50，</span><br></pre></td></tr></table></figure><h3 id="浏览器请求阻塞"><a href="#浏览器请求阻塞" class="headerlink" title="浏览器请求阻塞"></a>浏览器请求阻塞</h3><p>浏览器在<strong>同一时刻对相同域名</strong>的请求数有一定的限制，不同的浏览器表现不同，一般都是 4-10 个。chrome 浏览器默认情况下是 6 个。为了绕过这个限制，可以采用<strong>多域名</strong>的方法。</p><h3 id="cookie-free"><a href="#cookie-free" class="headerlink" title="cookie-free"></a>cookie-free</h3><p><strong>浏览器不会把主域名的 Cookie 传给子域名</strong>。利用这一特性我们可以将 css 和 image 单独放在不同的子域名中，减少网络开销，一定程度提高了页面加载速度， 这种技术应用叫做 cookie-free。</p><h2 id="三、资源下载优化"><a href="#三、资源下载优化" class="headerlink" title="三、资源下载优化"></a>三、资源下载优化</h2><p>资源下载速度的快慢取决于文件的大小和服务器带宽，所以优化也是从这两方面入手。</p><ol><li>提高服务器 <strong>server 带宽</strong></li><li>开启服务器 <strong>gzip</strong> 压缩</li></ol><h2 id="四、浏览器渲染优化"><a href="#四、浏览器渲染优化" class="headerlink" title="四、浏览器渲染优化"></a>四、浏览器渲染优化</h2><p>浏览器资源渲染过程如下：</p><ol><li>解析 HTML 文件，构建 <strong>DOM 树</strong>，与此同时浏览器主进程下载 CSS 文件</li><li>CSS 文件下载完成，解析 CSS 文件构建 <strong>CSSOM 树</strong>；</li><li>CSSOM + DOM 合并成 <strong>render 树</strong>；</li><li>布局（<strong>Layout/reflow</strong>） render 树 ，负责 render 树中的元素的尺寸和位置等计算；</li><li>绘制（<strong>paint</strong>） render 树 ，绘制页面的像素信息（color 等）；</li><li>浏览器主进程将图层交给 GPU 进程，GPU 进程将各个<strong>图层合成</strong>（composite），最后显示出页面；</li></ol><p>由此可见：</p><ol><li>css 的加载<strong>不会影响 dom 的解析</strong>，但<strong>会影响 dom 的最终渲染</strong>。</li><li>当浏览器遇到 <code>&lt;script&gt;</code> 时，会<strong>阻止解析器</strong>继续执行。直到 <code>CSSOM 构建</code>完毕，JavaScript 才会运行并继续完成 <code>DOM 构建</code>过程。所以解析优先级 <code>CSSOM &gt; JS &gt; DOM</code>。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&apos;&apos; async&gt;</span><br><span class="line">// async: 浏览器遇到带async的 script 标签时会继续解析 DOM，同时脚本也不会被 CSSOM 阻止，即不会阻止 CRP。</span><br><span class="line"></span><br><span class="line">&lt;script src=&apos;&apos; defer&gt;</span><br><span class="line">// defer: 脚本需要等到文档解析后（ **DOMContentLoaded 事件前**）执行，而 async 允许脚本在文档解析时位于后台运行（两者下载的过程都不会阻塞 DOM，但执行会）。</span><br><span class="line">// 当脚本不会修改 DOM 或 CSSOM 时，推荐使用 async 。</span><br></pre></td></tr></table></figure><p>了解以上原理后，我们就可以提出以下几点优化建议：</p><ol><li>合并重复的 css 样式，将 css 样式放在文档前部（如：<code>&lt;head&gt;中</code>）,将 js 放在文档后部（如：<code>&lt;body&gt;最后面</code>）；</li><li>只渲染<strong>首屏</strong>，页面采用<strong>懒加载</strong>方式；</li><li>有必要的地方采用页面<strong>预加载</strong>；</li></ol><h2 id="五、缓存优化"><a href="#五、缓存优化" class="headerlink" title="五、缓存优化"></a>五、缓存优化</h2><ol><li><p>DNS 缓存 （前面已经提到，此处略）</p></li><li><p>http 缓存<br>http 缓存主要缓存的对象是向服务器请求的 <strong>css/js/image</strong> 等文件。其主页入口<strong>html 文件</strong>一般不做缓存。下次请求时，缓存过的文件一般就不会向服务器发送请求。如果想解除缓存限制，只需要修改请求 url <strong>版本</strong>号（<code>MD5</code> 算法）。<br>添加缓存的方式：</p><ol><li><p>后端 response header 添加 <code>cache-control: max-age=1000</code>，此方法最常用；</p></li><li><p>Expires 和 Last-Modified，逐步被弃用；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Expires:Thu, 02 Apr 2009 05:14:08 GMT</span><br><span class="line">Last-Modified:Tue, 24 Feb 2009 08:01:04 GMT</span><br></pre></td></tr></table></figure></li><li><p>ETAG，逐步被弃用<br><code>Etag:“5d8c72a5edda8d6a:3239″</code></p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs 入门</title>
      <link href="2020/12/31/nodejs%E5%85%A5%E9%97%A8/"/>
      <url>2020/12/31/nodejs%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-nodejs"><a href="#什么是-nodejs" class="headerlink" title="什么是 nodejs?"></a>什么是 nodejs?</h2><p>对于新手而言，nodejs 可能会<strong>被误认为是后端的 js</strong>。我们要知道，nodejs <strong>不是一个 web 框架</strong>，也<strong>不是一门编程语言</strong>，它是一个让 js 也可以调用系统接口，开发后端应用的<strong>运行环境</strong>。</p><h2 id="nodejs-技术架构"><a href="#nodejs-技术架构" class="headerlink" title="nodejs 技术架构"></a>nodejs 技术架构</h2><p>我们知道了 nodejs 是一个平台。那么它底层的技术架构是怎么实现的呢？<br><img src="/images/nodejs_process.jpg" alt="nodejs 工作流程"><br>nodejs 给用户提供了常用的 <strong>API</strong> 。这些 api 我们可以直接在 js 中使用。js 是运行在<strong>V8 引擎</strong>上的，V8 引擎通过 <strong>nodejs Bindings</strong> 与 <strong>libUV</strong> 通信。除此之外，我们还可以<strong>自定义 c/c++ 插件</strong>拓展功能。</p><h3 id="nodejs-Bindings"><a href="#nodejs-Bindings" class="headerlink" title="nodejs Bindings"></a>nodejs Bindings</h3><p>我们都知道 c/c++执行效率非常高，那么我们想用 js 直接调用 c/c++库 怎么办？nodejs Bindings 就是连接 js 和 c/c++ 的中间桥梁。Binding 将 c/c++ 编译为 .node 文件，这个文件可以直接被 js 获取并执行。</p><h3 id="V8-引擎"><a href="#V8-引擎" class="headerlink" title="V8 引擎"></a>V8 引擎</h3><p>V8 引擎负责将 js 源代码变成本地代码并执行。它<strong>维护了调用栈</strong>，确保 js 的执行顺序。负责<strong>内存管理和垃圾回收</strong>。实现了 js 的标准库，但不提供 DOM API, DOM API 是浏览器提供的。<br>V8 引擎本身是多线程的，但是执行 js 是单线程，它自身有 EventLoop 机制，但是 <strong>nodejs 的 EventLoop 是基于 libuv 的</strong>。</p><h3 id="libUV"><a href="#libUV" class="headerlink" title="libUV"></a>libUV</h3><p>libUV 是 nodejs 之父 Ryan 开发的一个<strong>高性能跨平台 异步 I/O 库</strong>，底层由 c 语言编写，有自己的一套 eventLoop 机制。它专为 Node.js 而设计，后因<strong>事件驱动</strong>的异步 IO 的高效逐渐被其他语言和项目采纳。libUV 通常可用于 TCP / UDP / DNS / FileSystem 等异步操作。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue单页面应用白屏屏优化</title>
      <link href="2020/12/27/vue%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E7%99%BD%E5%B1%8F%E5%B1%8F%E4%BC%98%E5%8C%96/"/>
      <url>2020/12/27/vue%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E7%99%BD%E5%B1%8F%E5%B1%8F%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是单页面应用（SPA-？"><a href="#什么是单页面应用（SPA-？" class="headerlink" title="什么是单页面应用（SPA)？"></a>什么是单页面应用（SPA)？</h2><p>vue 单页面应用使前端开发更加快捷、方便。<strong>何谓单页面应用（SPA)</strong>？</p><p><strong>单页面</strong>应用是指<strong>只有一个主页面</strong>的应用，浏览器一开始要加载所有必须的 html, js, css。所有的页面内容都包含在这个所谓的主页面中。在交互的时候由路由程序动态载入，单页面的页面跳转，仅局部刷新。</p><p><strong>多页面</strong>应用（MPA）是指有多个页面的应用，页面跳转时是整页刷新。</p><h2 id="单页面应用的优缺点"><a href="#单页面应用的优缺点" class="headerlink" title="单页面应用的优缺点"></a>单页面应用的优缺点</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>页面跳转快而流畅，可添加转场效果，局部刷新用户体验较好。</li><li>前后端分离，组件化开发，易复用，易维护。</li><li>页面跳转基于前端路由，对服务器压力较小。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>首页加载仅一个空标签，对<strong>SEO 不友好</strong>。</li><li>页面基于 js 渲染，弱网环境下，首页加载时间长，会出现<strong>白屏问题</strong>。</li><li>页面导航需要自行实现，页面的复杂度较高，需要一定的开发成本。</li></ol><h2 id="单页面应用-SEO-和白屏优化"><a href="#单页面应用-SEO-和白屏优化" class="headerlink" title="单页面应用 SEO 和白屏优化"></a>单页面应用 SEO 和白屏优化</h2><p>我们可以通过按需加载、gzip 压缩等方法缓解单页面应用 js 包过大问题。但是解决白屏优化主要有以下三种方法：</p><ol><li><strong>骨架屏</strong> (优化白屏问题)</li><li><strong>预渲染</strong> (preRender 优化 SEO)</li><li><strong>服务端渲染</strong>（ssr 优化白屏问题和 SEO)</li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逸辰音乐问题点</title>
      <link href="2020/12/26/%E9%80%B8%E8%BE%B0%E9%9F%B3%E4%B9%90%E9%97%AE%E9%A2%98%E7%82%B9/"/>
      <url>2020/12/26/%E9%80%B8%E8%BE%B0%E9%9F%B3%E4%B9%90%E9%97%AE%E9%A2%98%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>今天在重构自己的项目时，发现了不少问题。总结归纳一下， 以便提高自己。</p><h2 id="一、在-vue-项目现有的-stylus-代码中添加新的样式无效"><a href="#一、在-vue-项目现有的-stylus-代码中添加新的样式无效" class="headerlink" title="一、在 vue 项目现有的 stylus 代码中添加新的样式无效"></a>一、在 vue 项目现有的 stylus 代码中添加新的样式无效</h2><p>在重构旧项目的过程中，我需要在现有 stylus 样式中添加一些 css。但是在添加 css 后，发现新样式不仅没有生效，反而会影响原有的样式。绞尽脑汁，最后发现是<strong>stylus 缩进的格式</strong>有问题。stylus 写法有很多种，常见的写法有 <strong>{}</strong> 或者<strong>缩进</strong>。当使用缩进写法时，<strong>空格和 tab 不能混用</strong>，否则会造成编译错误。<br><img src="/images/stylus_bug_reason.png" alt="stylus"></p><h2 id="二、多个-jsonp-请求问题"><a href="#二、多个-jsonp-请求问题" class="headerlink" title="二、多个 jsonp 请求问题"></a>二、多个 jsonp 请求问题</h2><p>使用 jsonp 库<strong>同时发送多个 jsonp</strong>请求时，要保证 <strong>callback 参数各不相同</strong>，否则会导致 data 解析失败。</p><h2 id="三、页面刷新-vuex-数据丢失"><a href="#三、页面刷新-vuex-数据丢失" class="headerlink" title="三、页面刷新 vuex 数据丢失"></a>三、页面刷新 vuex 数据丢失</h2><p>在项目中，我们很多时候不可避免的会使用 vuex 来管理全局状态。vuex 状态是保存在<strong>运行时内存</strong>中的。当<strong>F5</strong>页面刷新时，vuex 会被<strong>新建并初始化</strong>，这就导致了数据丢失。常用的解决办法就是借助 <strong>sessionStorage</strong> 或者 <strong>localStorage</strong> 缓存 vuex 中重要的数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//  in state.ts</span><br><span class="line">const sessionDisc = window.sessionStorage.getItem(&quot;disc&quot;)</span><br><span class="line">const state: any = &#123;</span><br><span class="line">  disc: sessionDisc ? JSON.parse(sessionDisc) : &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  in mutations.ts</span><br><span class="line">  [types.SET_DISC](state: any, cd: any) &#123;</span><br><span class="line">    state.disc = cd</span><br><span class="line">    window.sessionStorage.setItem(&quot;disc&quot;, JSON.stringify(cd))</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>造轮子遇到的问题</title>
      <link href="2020/12/24/%E9%80%A0%E8%BD%AE%E5%AD%90%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2020/12/24/%E9%80%A0%E8%BD%AE%E5%AD%90%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在 vue3 造轮子的过程中，我遇到了很多问题，这都是在平时在写业务代码时不常见的知识点。在写业务代码时，我主要关注的是<strong>业务逻辑</strong>，写出的代码质量相对不高。而在造轮子的过程中，我需要去抽象各种组件，会遇到各种形形色色的问题。总结归纳有助于不断的提高自己。</p><h3 id="一、-使用-BackTop-组件传递-target（滚动容器）"><a href="#一、-使用-BackTop-组件传递-target（滚动容器）" class="headerlink" title="一、 使用 BackTop 组件传递 target（滚动容器）"></a>一、 使用 BackTop 组件传递 target（滚动容器）</h3><p>当我们浏览 web 页面过长时，手动滚动回顶部需要的时间较长，这时可能就需要<strong>返回页面顶部</strong>的操作按钮。所以我就自己写了一个 BackTop 组件，该组件的具体用法<a href="https://cai4633.gitee.io/mom-ui-doc/#/doc/backtop" target="_blank" rel="noopener">见文档</a>。BackTop 组件使用时需要传递一个 target，这个参数是被监视滚动事件的元素，默认是 document。<br>一开始，我设计的是直接传递一个 ELEMENT_NODE 给 target。但在实际运行时，发现会报错。因为在<strong>ELEMENT_NODE</strong>被传递过来时，<strong>ELEMENT_NODE 不一定已经被渲染</strong>。</p><p>解决这个问题的方法很经典：<strong>使用函数延迟代码执行</strong>。我不再直接传递 ELEMENT_NODE ， 而是传递一个函数给 target。 该<strong>函数的返回值是一个 ELEMENT_NODE</strong> 。这样当我在 BackTop 组件 onMounted()时调用这个函数就可以适时的获取想要的 target。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 常用知识点</title>
      <link href="2020/12/16/ES6-%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2020/12/16/ES6-%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<ol><li><p>let 和 const 命令</p></li><li><p>解构赋值<br>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为<strong>解构</strong>（Destructuring）。<br>解构赋值允许指定<strong>默认值</strong>，只有当一个成员<strong>严格等于undefined</strong>，默认值才会生效。<br>解构赋值在变量声明时不要添加<strong>圆括号</strong>，在变量赋值时可以添加圆括号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 错误的写法</span><br><span class="line">let x;</span><br><span class="line">&#123;x&#125; = &#123;x: 1&#125;; // SyntaxError: syntax error</span><br><span class="line"></span><br><span class="line">// 正确的写法</span><br><span class="line">let x;</span><br><span class="line">(&#123;x&#125; = &#123;x: 1&#125;);</span><br></pre></td></tr></table></figure><ul><li>数组的解构赋值<br>只要某种数据结构具有 <strong>Iterator 接口</strong>，都可以采用数组形式的解构赋值。（例如：Array 、 Set 、Map 和  Generator 函数）</li><li>对象的解构赋值<br>对象的解构赋值的内部机制，是<strong>先找到同名属性</strong>，然后<strong>再赋值给对应的变量</strong>。真正被赋值的是后者，而不是前者。</li><li>函数参数的解构赋值 </li><li>字符串的解构赋值<br><code>const [a,b] = &#39;xy&#39; // a=&#39;x&#39;; b=&#39;y&#39;</code></li><li>数值和布尔值的解构赋值<br>只要等号右边的值<strong>不是对象或数组</strong>，就先将其<strong>转为对象</strong>。由于<strong>undefined和null无法转为对象</strong>，所以对它们进行解构赋值，都会报错。</li></ul></li><li><p>模板字符串 和 标签模板</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>var 、 let 和 const</title>
      <link href="2020/12/16/var-let-%E5%92%8C-const-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2020/12/16/var-let-%E5%92%8C-const-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="var-和-let-的区别"><a href="#var-和-let-的区别" class="headerlink" title="var 和 let 的区别"></a>var 和 let 的区别</h2><ol><li><strong>作用域不同</strong>。let 有块级作用域。var 只有全局作用域和函数作用域。（例如：for 代码块）js 的作用域只是定义了<strong>变量的可访问性</strong>，但是变量的具体值决定于<strong>代码（函数）执行时机。</strong></li><li><strong>变量提升和暂时性死区</strong>。 var 存在变量提升。let 不存在变量提升但是有暂时性死区。</li><li><strong>重复声明</strong>。let 不允许在相同作用域内，重复声明同一个变量。var 可以。</li><li><strong>全局对象属性</strong>。 var 声明的变量是全局变量的属性，let 声明的变量却不是。</li></ol><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>ES5 中只存在全局作用域和函数作用域，而 ES6 中添加了块级作用域。块级作用域几个易错点：</p><ul><li>块级作用域必须要有<strong>大括号</strong>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 第一种写法，报错</span><br><span class="line">if (true) let x = 1;</span><br><span class="line"></span><br><span class="line">// 第二种写法，不报错</span><br><span class="line">if (true) &#123;</span><br><span class="line">  let x = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于不同浏览器环境对于<strong>函数声明在块级作用域中的行为</strong>差别较大，所以块级作用域中的函数声明最好用<strong>函数表达式来代替</strong>。</li></ul><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p><strong>const</strong> 声明一个<strong>只读</strong>的常量。声明变量时，就必须立即<strong>初始化</strong>。</p><p>const 和 let 很多特性类似，包括块级作用域、无变量提升、有暂时性死区、不能重复声明和不绑定全局对象属性。</p><p>const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。如果真的想将对象冻结，应该使用<strong>Object.freeze</strong>方法。</p>]]></content>
      
      
      <categories>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> let </tag>
            
            <tag> const </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线记账项目遇到的问题</title>
      <link href="2020/09/24/%E5%9C%A8%E7%BA%BF%E8%AE%B0%E8%B4%A6%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2020/09/24/%E5%9C%A8%E7%BA%BF%E8%AE%B0%E8%B4%A6%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol><li>-webkit-overflow-scroll: touch/auto;可以使移动端浏览器产生过滚动回弹效果，但是下拉body背景会影响fixed布局元素。</li><li>移动端少用100vh,因为100vh包括菜单栏高度和工具栏会导致页面不可控，可以用 css -100% 或者 js document.innerHeight来替代。</li><li>flex 布局最后一行左对齐： 给父元素添加after伪元素，设置flex:1</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>虚拟 DOM 和 DOM diff</title>
      <link href="2020/09/18/%E8%99%9A%E6%8B%9FDOM%E5%92%8CDOM%20diff/"/>
      <url>2020/09/18/%E8%99%9A%E6%8B%9FDOM%E5%92%8CDOM%20diff/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h2><h3 id="虚拟-DOM-是什么"><a href="#虚拟-DOM-是什么" class="headerlink" title="虚拟 DOM 是什么"></a>虚拟 DOM 是什么</h3><p>虚拟 dom 的本质就是一个能代表 dom 树的<strong>JS 对象。</strong> 它是相对于浏览器所渲染出来的真实 dom 而言的。它包括标签类型、子元素、属性以及事件等。</p><p>在虚拟 DOM 技术出现之前，我们要改变页面内容只能通过遍历查询 dom 树的方式找到需要修改的 dom 然后修改 dom 属性或者结构等，来达到更新 ui 的目的。因为每次查询 dom 几乎都需要遍历整颗 dom 树。所以这种方式比较消耗性能。虚拟 dom 对象（ js 对象）以对象嵌套的方式来表示 dom 树，查找 js 对象的属性变化要比查询 dom 树的性能开销小。</p><h3 id="虚拟-DOM-实例"><a href="#虚拟-DOM-实例" class="headerlink" title="虚拟 DOM 实例"></a>虚拟 DOM 实例</h3><p>虚拟 dom 在不同的框架中，有着不一样的具体形式。<br><strong>React 虚拟 DOM</strong> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const vNode = &#123;</span><br><span class="line">  key: null,</span><br><span class="line">  type:&apos;div&apos;,</span><br><span class="line">  ref: null,</span><br><span class="line">  props: &#123;</span><br><span class="line">    children:[</span><br><span class="line">      &#123;type:&apos;span&apos; ...&#125;,</span><br><span class="line">      &#123;type:&apos;span&apos; ...&#125;,</span><br><span class="line">    ],</span><br><span class="line">    onClick:()=&gt;&#123;&#125;,</span><br><span class="line">    className: &apos;main&apos;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Vue 虚拟 DOM</strong> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const vNode = &#123;</span><br><span class="line">  tag:&apos;div&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    on:&#123;</span><br><span class="line">      click:()=&gt;&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    class: &apos;main&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  children:[</span><br><span class="line">    &#123;tag:&apos;span&apos; ...&#125;,</span><br><span class="line">    &#123;tag:&apos;span&apos; ...&#125;,</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建虚拟-DOM"><a href="#创建虚拟-DOM" class="headerlink" title="创建虚拟 DOM"></a>创建虚拟 DOM</h3><p>React 内置函数：<code>React.createElement(type,[props],[...children])</code><br>简化写法： jsx + babel<br>Vue 内置函数：<code>h(tag,data,children)</code><br>简化写法： vue template + vue-loader</p><h3 id="虚拟-DOM-的优点"><a href="#虚拟-DOM-的优点" class="headerlink" title="虚拟 DOM 的优点"></a>虚拟 DOM 的优点</h3><ol><li>减少 dom 操作次数<br>真实 dom 插入 1000 个节点需要进行 1000 次 dom 操作，虚拟 dom 可以将多次操作合并为一次 dom 操作。</li><li>减少 dom 操作范围<br>通过 DOM diff 算法对比新旧虚拟 dom 树,去掉不必要的 dom 操作。例如：添加 1000 个节点，虚拟 dom 通过对比发现有 900 个相同的节点已经存在于相同的层级位置，那么虚拟 dom 只会添加 100 个节点。</li><li>跨平台<br>由于虚拟 dom 本质是 JS 对象，所以它可以变成 DOM、小程序、IOS 应用或者安卓应用。</li></ol><h3 id="虚拟-DOM-的缺点"><a href="#虚拟-DOM-的缺点" class="headerlink" title="虚拟 DOM 的缺点"></a>虚拟 DOM 的缺点</h3><ol><li>需要额外的创建函数</li><li>需要额外的转义构建工具</li><li>节点数量少时虚拟 dom 效率高，但是节点数量多时虚拟 dom 性能比不上原生dom（vue接近原生dom，react性能偏差）。</li></ol><h2 id="DOM-diff"><a href="#DOM-diff" class="headerlink" title="DOM diff"></a>DOM diff</h2><h3 id="DOM-diff-是什么"><a href="#DOM-diff-是什么" class="headerlink" title="DOM diff 是什么"></a>DOM diff 是什么</h3><p>它的本质是一个函数，类似于<code>patches = patch(newVDom, oldVDom)</code>。其中patches就是需要进行的 dom 操作。diff 算法在执行时有三个维度，分别是<strong>tree diff、component diff 和 element diff，</strong>执行时按层级顺序依次执行，它们的差异仅仅因为 diff 粒度不同、执行先后顺序不同。</p><h3 id="DOM-diff-的优点"><a href="#DOM-diff-的优点" class="headerlink" title="DOM diff 的优点"></a>DOM diff 的优点</h3><p>DOM diff算法会对比 oldNode 与 newNode 的区别，从而<strong>减少不必要的渲染</strong>。</p><h3 id="DOM-diff-的问题"><a href="#DOM-diff-的问题" class="headerlink" title="DOM diff 的问题"></a>DOM diff 的问题</h3><p>DOM diff在同层级对比中有bug。造成页面渲染错误。<strong>同一层级的一组节点</strong>可以通过唯一的id进行区分, 所以可以给节点设定唯一的key。从而消除bug。<strong>key只能是number和string类型，一定不要用index作为key值。</strong></p><h3 id="几个使用key的场景"><a href="#几个使用key的场景" class="headerlink" title="几个使用key的场景"></a>几个使用key的场景</h3><ol><li>v-for (vue)</li><li>同一层级有相同标签节点的<strong>transition动画</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vDOM </tag>
            
            <tag> DOM diff </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一篇文章搞懂promise</title>
      <link href="2020/08/18/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%90%9E%E6%87%82promise/"/>
      <url>2020/08/18/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%90%9E%E6%87%82promise/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise-解决了什么问题？"><a href="#Promise-解决了什么问题？" class="headerlink" title="Promise 解决了什么问题？"></a>Promise 解决了什么问题？</h2><p>在传统的异步编程中，如果异步之间存在依赖关系，就需要通过层层嵌套回调的方式满足这种依赖，如果嵌套层数过多，可读性和可以维护性都会变得很差，产生所谓的<strong>“回调地狱”</strong>。而 <code>Promise</code> 将嵌套调用改为<strong>链式调用</strong>，增加了可阅读性和可维护性。也就是说，Promise 用一种更加<strong>友好的代码组织方式</strong>解决了<strong>异步嵌套</strong>问题。Promise的缺陷是无法中断请求。<br>产生回调地狱的原因主要有两点：</p><ol><li>(异步请求)嵌套调用，第一个函数的输出往往是第二个函数的输入；(Promise thenable 链式调用可以解决)</li><li>处理多个异步请求并发，开发时需要同步请求最终的结果。（Promise.all()可以解决）</li></ol><h2 id="then-的链式调用和值穿透"><a href="#then-的链式调用和值穿透" class="headerlink" title="then 的链式调用和值穿透"></a>then 的链式调用和值穿透</h2><p>在我们使用 Promise 的时候，当 then 函数中 return 了一个值，不管是什么值，我们都能在下一个 then 中获取到，这就是所谓的 then 的链式调用。而且，当我们不在 then 中放入参数，例：promise.then().then()，那么其后面的 then 依旧可以得到之前 then 返回的值，这就是所谓的值的穿透。</p><h2 id="Promise-的-API"><a href="#Promise-的-API" class="headerlink" title="Promise 的 API"></a>Promise 的 API</h2><ul><li>Promise.resolve() 产生一个成功的 promise, 直接将值变成成功结果</li><li>Promise.reject()  产生一个失败的 promise，直接将值变成错误结果</li><li>Promise.all()   解决并发问题的，多个异步并发获取最终的结果（如果有一个失败则失败)</li><li>Promise.race()  处理多个请求,谁先完成用谁的</li><li>Promise.prototype.catch()   捕获 promise 的异常</li><li>Promise.prototype.finally()  无论如何都会执行</li></ul><h2 id="Promise-A-规范"><a href="#Promise-A-规范" class="headerlink" title="Promise/A+ 规范"></a>Promise/A+ 规范</h2><ol><li>promise 有三个状态：<strong>pending，fulfilled，rejected</strong>, 默认状态是 pending</li><li>new promise 时， 需要传递一个 executor(resolve, reject)执行器，<strong>执行器立即执行</strong></li><li>promise 有一个<strong>value 保存成功状态</strong>的值，可以是 undefined/thenable/promise</li><li>promise 有一个<strong>reason 保存失败状态</strong>的值</li><li>promise <strong>只能</strong>从 pending 到 rejected, 或者从 pending 到 fulfilled，状态一旦确认，就不会再改变</li><li>promise 必须有一个 then 方法，then 接收两个参数，分别是 promise 成功的回调 onFulfilled, 和 promise 失败的回调 onRejected</li><li>如果调用 then 时，promise 已经成功，则执行 onFulfilled，参数是 promise 的 value；</li><li>如果调用 then 时，promise 已经失败，那么执行 onRejected, 参数是 promise 的 reason；</li><li>如果 then 中抛出了异常，那么就会把这个异常作为参数，传递给下一个 then 的失败的回调 onRejected</li><li>then 的参数 onFulfilled 和 onRejected 可以缺省，如果 onFulfilled 或者 onRejected 不是函数，将其忽略，且依旧可以在下面的 then 中获取到之前返回的值；</li><li>promise 可以 then 多次，每次执行完 promise.then 方法后返回的都是一个<strong>“新的 promise”</strong></li><li>如果 then 的返回值是一个普通值，那么就会把这个结果作为参数，传递给下一个 then 的成功的回调中；</li><li>如果 then 的<strong>返回值是一个 promise，那么会等这个 promise 执行完</strong>，promise 如果成功，就走下一个 then 的成功；如果失败，就走下一个 then 的失败；如果抛 1. 出异常，就走下一个 then 的失败</li><li>如果 then 的返回值和 promise 是同一个引用对象，造成循环引用，则抛出异常，把异常传递给下一个 then 的失败的回调中</li><li>如果 then 的返回值 x 是一个 promise，且 x 同时调用 resolve 函数和 reject 函数，则第一次调用优先，其他所有调用被忽略</li></ol><p><code>Promise实现代码：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line">const PENDING = &apos;PENDING&apos;;</span><br><span class="line">const FULFILLED = &apos;FULFILLED&apos;;</span><br><span class="line">const REJECTED = &apos;REJECTED&apos;;</span><br><span class="line"></span><br><span class="line">const resolvePromise = (promise2, x, resolve, reject) =&gt; &#123;</span><br><span class="line">  // 自己等待自己完成是错误的实现，用一个类型错误，结束掉 promise  Promise/A+ 2.3.</span><br><span class="line">  if (promise2 === x) &#123;</span><br><span class="line">    return reject(new TypeError(&apos;Chaining cycle detected for promise #&lt;Promise&gt;&apos;))</span><br><span class="line">  &#125;</span><br><span class="line">  // Promise/A+ 2.3.3.3.3 只能调用一次</span><br><span class="line">  let called;</span><br><span class="line">  // 后续的条件要严格判断 保证代码能和别的库一起使用</span><br><span class="line">  if ((typeof x === &apos;object&apos; &amp;&amp; x != null) || typeof x === &apos;function&apos;) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      // 为了判断 resolve 过的就不用再 reject 了（比如 reject 和 resolve 同时调用的时候）  Promise/A+ 2.3.3.1</span><br><span class="line">      let then = x.then;</span><br><span class="line">      if (typeof then === &apos;function&apos;) &#123;</span><br><span class="line">        // 不要写成 x.then，直接 then.call 就可以了 因为 x.then 会再次取值，Object.defineProperty  Promise/A+ 2.3.3.3</span><br><span class="line">        then.call(x, y =&gt; &#123; // 根据 promise 的状态决定是成功还是失败</span><br><span class="line">          if (called) return;</span><br><span class="line">          called = true;</span><br><span class="line">          // 递归解析的过程（因为可能 promise 中还有 promise） Promise/A+ 2.3.3.3.1</span><br><span class="line">          resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;, r =&gt; &#123;</span><br><span class="line">          // 只要失败就失败 Promise/A+ 2.3.3.3.2</span><br><span class="line">          if (called) return;</span><br><span class="line">          called = true;</span><br><span class="line">          reject(r);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        // 如果 x.then 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.3.4</span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      // Promise/A+ 2.3.3.2</span><br><span class="line">      if (called) return;</span><br><span class="line">      called = true;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 如果 x 是个普通值就直接返回 resolve 作为结果  Promise/A+ 2.3.4</span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Promise &#123;</span><br><span class="line">  constructor(executor) &#123;</span><br><span class="line">    this.status = PENDING;</span><br><span class="line">    this.value = undefined;</span><br><span class="line">    this.reason = undefined;</span><br><span class="line">    this.onResolvedCallbacks = [];</span><br><span class="line">    this.onRejectedCallbacks= [];</span><br><span class="line"></span><br><span class="line">    let resolve = (value) =&gt; &#123;</span><br><span class="line">      if(this.status ===  PENDING) &#123;</span><br><span class="line">        this.status = FULFILLED;</span><br><span class="line">        this.value = value;</span><br><span class="line">        this.onResolvedCallbacks.forEach(fn=&gt;fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let reject = (reason) =&gt; &#123;</span><br><span class="line">      if(this.status ===  PENDING) &#123;</span><br><span class="line">        this.status = REJECTED;</span><br><span class="line">        this.reason = reason;</span><br><span class="line">        this.onRejectedCallbacks.forEach(fn=&gt;fn());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">      executor(resolve,reject)</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">      reject(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 静态方法 --&gt;</span><br><span class="line">  static resolve(data)&#123;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static reject(reason)&#123;</span><br><span class="line">    return new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">      reject(reason);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static race(promises) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      // 一起执行就是for循环</span><br><span class="line">      for (let i = 0; i &lt; promises.length; i++) &#123;</span><br><span class="line">        let val = promises[i];</span><br><span class="line">        if (val &amp;&amp; typeof val.then === &apos;function&apos;) &#123;</span><br><span class="line">          val.then(resolve, reject);</span><br><span class="line">        &#125; else &#123; // 普通值</span><br><span class="line">          resolve(val)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  static all(values) &#123;</span><br><span class="line">    if (!Array.isArray(values)) &#123;</span><br><span class="line">      const type = typeof values;</span><br><span class="line">      return new TypeError(`TypeError: $&#123;type&#125; $&#123;values&#125; is not iterable`)</span><br><span class="line">    &#125;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      let resultArr = [];</span><br><span class="line">      let orderIndex = 0;</span><br><span class="line">      const processResultByKey = (value, index) =&gt; &#123;</span><br><span class="line">        resultArr[index] = value;</span><br><span class="line">        if (++orderIndex === values.length) &#123;</span><br><span class="line">            resolve(resultArr)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      for (let i = 0; i &lt; values.length; i++) &#123;</span><br><span class="line">        let value = values[i];</span><br><span class="line">        if (value &amp;&amp; typeof value.then === &apos;function&apos;) &#123;</span><br><span class="line">          value.then((value) =&gt; &#123;</span><br><span class="line">            processResultByKey(value, i);</span><br><span class="line">          &#125;, reject);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          processResultByKey(value, i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    //解决 onFufilled，onRejected 没有传值的问题</span><br><span class="line">    //Promise/A+ 2.2.1 / Promise/A+ 2.2.5 / Promise/A+ 2.2.7.3 / Promise/A+ 2.2.7.4</span><br><span class="line">    onFulfilled = typeof onFulfilled === &apos;function&apos; ? onFulfilled : v =&gt; v;</span><br><span class="line">    //因为错误的值要让后面访问到，所以这里也要跑出个错误，不然会在之后 then 的 resolve 中捕获</span><br><span class="line">    onRejected = typeof onRejected === &apos;function&apos; ? onRejected : err =&gt; &#123; throw err &#125;;</span><br><span class="line">    // 每次调用 then 都返回一个新的 promise  Promise/A+ 2.2.7</span><br><span class="line">    let promise2 = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">      if (this.status === FULFILLED) &#123;</span><br><span class="line">        //Promise/A+ 2.2.2</span><br><span class="line">        //Promise/A+ 2.2.4 --- setTimeout</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            //Promise/A+ 2.2.7.1</span><br><span class="line">            let x = onFulfilled(this.value);</span><br><span class="line">            // x可能是一个proimise</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; catch (e) &#123;</span><br><span class="line">            //Promise/A+ 2.2.7.2</span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 0);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (this.status === REJECTED) &#123;</span><br><span class="line">        //Promise/A+ 2.2.3</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">          try &#123;</span><br><span class="line">            let x = onRejected(this.reason);</span><br><span class="line">            resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; catch (e) &#123;</span><br><span class="line">            reject(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, 0);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (this.status === PENDING) &#123;</span><br><span class="line">        this.onResolvedCallbacks.push(() =&gt; &#123;</span><br><span class="line">          setTimeout(() =&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">              let x = onFulfilled(this.value);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">            &#125; catch (e) &#123;</span><br><span class="line">              reject(e)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, 0);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        this.onRejectedCallbacks.push(()=&gt; &#123;</span><br><span class="line">          setTimeout(() =&gt; &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">              let x = onRejected(this.reason);</span><br><span class="line">              resolvePromise(promise2, x, resolve, reject)</span><br><span class="line">            &#125; catch (e) &#123;</span><br><span class="line">              reject(e)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, 0);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return promise2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise.prototype.catch = function(errCallback)&#123;</span><br><span class="line">  return this.then(null,errCallback)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise.prototype.finally = function(callback) &#123;</span><br><span class="line">  return this.then((value)=&gt;&#123;</span><br><span class="line">    return Promise.resolve(callback()).then(()=&gt;value)</span><br><span class="line">  &#125;,(reason)=&gt;&#123;</span><br><span class="line">    return Promise.resolve(callback()).then(()=&gt;&#123;throw reason&#125;)</span><br><span class="line">  &#125;)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/183801144" target="_blank" rel="noopener">你能手写一个 Promise 吗</a></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="2020/07/18/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>2020/07/18/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>在前端开发的过程中，我们经常会遇到一些的事件会持续触发，如 resize、scroll、mousemove 等，但有时候我们并不希望事件函数频繁的被执行。这时就需要用到<strong>防抖和节流</strong></p><h2 id="防抖（控制次数）"><a href="#防抖（控制次数）" class="headerlink" title="防抖（控制次数）"></a>防抖（控制次数）</h2><p><strong>防抖，就是触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计时。</strong> 常见的实现方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function debounce (fn,  delay) &#123;</span><br><span class="line">  let timer = null</span><br><span class="line">  return function(...args)&#123;</span><br><span class="line">    if(timer)&#123;</span><br><span class="line">      window.clearTimeout(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(()=&gt;&#123;</span><br><span class="line">      fn.apply(this,args)</span><br><span class="line">    &#125;,delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流（控制频率）"><a href="#节流（控制频率）" class="headerlink" title="节流（控制频率）"></a>节流（控制频率）</h2><p><strong>节流，就是事件连续触发时，控制在 n 秒中只执行一次函数，如果在 n 秒内又触发了事件,会忽略触发</strong>。常见的实现方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function throttle(fn, delay) &#123;</span><br><span class="line">  let timer = null</span><br><span class="line">  return function (...arg)&#123;</span><br><span class="line">    if(!timer)&#123;</span><br><span class="line">      fn.apply(this, arg)</span><br><span class="line">      timer = window.setTimeout(()=&gt;&#123;</span><br><span class="line">        window.clearTimeout(timer)</span><br><span class="line">        timer = null</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防抖和节流的区别"><a href="#防抖和节流的区别" class="headerlink" title="防抖和节流的区别"></a>防抖和节流的区别</h2><p>有时候我们很容易混淆防抖和节流的触发机制，下面我们用一张图来展示他们的区别。<br><img src="/images/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="防抖和节流的区别"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 精华 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli本地代理mock数据</title>
      <link href="2020/05/25/vue-cli%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86mock%E6%95%B0%E6%8D%AE/"/>
      <url>2020/05/25/vue-cli%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%90%86mock%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>近期在做一个项目需要从qq音乐服务器抓取数据，但是由于浏览器同源策略的限制导致获取数据失败，需要从本地nodejs服务器中代理抓取数据，下面是vue-cli中的常见的配置。</p><h2 id="vue-cli-2-0之前的版本配置"><a href="#vue-cli-2-0之前的版本配置" class="headerlink" title="vue-cli 2.0之前的版本配置"></a>vue-cli 2.0之前的版本配置</h2><p>找到<strong>build/dev-server.js</strong>文件，加入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var axios = require(&apos;axios&apos;)</span><br><span class="line">var app = express()</span><br><span class="line">var apiRoutes = express.Router()</span><br><span class="line"></span><br><span class="line">apiRoutes.get(&apos;/getSongs&apos;, (req, res) =&gt; &#123;</span><br><span class="line">  var url = &apos;http://www.baidu.com&apos;</span><br><span class="line">  axios.get(url, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      referer: &apos;http://www.baidu.com&apos;,</span><br><span class="line">      host: &apos;http://www.baidu.com&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    params: req.query</span><br><span class="line">  &#125;).then((response) =&gt; &#123;</span><br><span class="line">    res.json(response.data)</span><br><span class="line">  &#125;).catch((e) =&gt; &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(&apos;/api&apos;, apiRoutes)</span><br></pre></td></tr></table></figure><hr><h2 id="vue-cli-3-0-版本配置"><a href="#vue-cli-3-0-版本配置" class="headerlink" title="vue-cli 3.0+版本配置"></a>vue-cli 3.0+版本配置</h2><p>3.0+版本的vue已将dev-server.js与webpack.dev.conf.js合并，若要写路由相关配置需要找到webpack.dev.conf.js中的<strong>devServer对象</strong>进行相关配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const axios = require(&quot;axios&quot;)</span><br><span class="line">const express = require(&quot;express&quot;)</span><br><span class="line">let app = express()</span><br><span class="line">let apiRoutes = express.Router()</span><br><span class="line">app.use(&quot;/api&quot;, apiRoutes)</span><br><span class="line"></span><br><span class="line">devServer: &#123;</span><br><span class="line">        before(app) &#123;</span><br><span class="line">            app.get(&quot;/api/getSongs&quot;, function(req, res) &#123;</span><br><span class="line">                var url = &quot;http://www.baidu.com&quot;</span><br><span class="line">                axios.get(url).then((response) =&gt; &#123; res.json(response.data) &#125;) .catch((e) =&gt; &#123; console.log(e) &#125;) &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><hr><h2 id="vue-cli-4-0-版本配置"><a href="#vue-cli-4-0-版本配置" class="headerlink" title="vue-cli 4.0+版本配置"></a>vue-cli 4.0+版本配置</h2><p>4.0+版本的vue-cli配置藏的更深，需要找到<code>node_modules/@vue/cli-service/options.js</code>文件中的<strong>devServer</strong>对象进行配置，配置方法同上面3.0版本类似。另外我们还可以在项目根目录自己新建一个vue.config.js配置文件，新建devServer对象利用<strong>before(app)或者proxy</strong>来进行请求代理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;)</span><br><span class="line">function resolve(dir) &#123;</span><br><span class="line">    return path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const axios = require(&quot;axios&quot;)</span><br><span class="line">const express = require(&quot;express&quot;)</span><br><span class="line">let app = express()</span><br><span class="line">let apiRoutes = express.Router()</span><br><span class="line">app.use(&quot;/api&quot;, apiRoutes)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    chainWebpack: (config) =&gt; &#123;</span><br><span class="line">        config.resolve.alias</span><br><span class="line">            .set(&quot;@&quot;, resolve(&quot;src&quot;))</span><br><span class="line">            .set(&quot;assets&quot;, resolve(&quot;src/assets&quot;))</span><br><span class="line">            .set(&quot;components&quot;, resolve(&quot;src/components&quot;))</span><br><span class="line">            .set(&quot;base&quot;, resolve(&quot;baseConfig&quot;))</span><br><span class="line">            .set(&quot;public&quot;, resolve(&quot;public&quot;))</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        before(app) &#123;</span><br><span class="line">            app.get(&quot;/api/lyric&quot;, function(req, res) &#123;</span><br><span class="line">                var url = &quot;http://www.baidu.com&quot;</span><br><span class="line">                axios</span><br><span class="line">                    .get(url)</span><br><span class="line">                    .then((response) =&gt; &#123;</span><br><span class="line">                        res.json(response.data)</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .catch((e) =&gt; &#123;</span><br><span class="line">                        console.log(e)</span><br><span class="line">                    &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        // proxy: &#123;</span><br><span class="line">        //     &quot;/api/getLists&quot;: &#123;</span><br><span class="line">        //         target:</span><br><span class="line">        //             &quot;http://www.baidu.com&quot;, //代理接口</span><br><span class="line">        //         changeOrigin: true,</span><br><span class="line">        //         pathRewrite: &#123;</span><br><span class="line">        //          &apos;^/api&apos;: &apos;&apos;    //代理的路径 //是否移除api三个字段,</span><br><span class="line">        //         &#125;</span><br><span class="line">        //         headers: &#123;</span><br><span class="line">        //             Referer: &quot;https://www.baidu.com&quot;,</span><br><span class="line">        //         &#125;,</span><br><span class="line">        //     &#125;,</span><br><span class="line">        // &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nodejs使用res-json-返回响应时，如果直接传入response变量会引起循环引用报错-只传入response-data就不会出现报错了。"><a href="#nodejs使用res-json-返回响应时，如果直接传入response变量会引起循环引用报错-只传入response-data就不会出现报错了。" class="headerlink" title="nodejs使用res.json()返回响应时，如果直接传入response变量会引起循环引用报错,只传入response.data就不会出现报错了。"></a>nodejs使用res.json()返回响应时，如果直接传入<code>response</code>变量会引起循环引用报错,只传入<code>response.data</code>就不会出现报错了。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Converting circular structure to JSON</span><br><span class="line">    --&gt; starting at object with constructor &apos;ClientRequest&apos;</span><br><span class="line">    |     property &apos;socket&apos; -&gt; object with constructor &apos;Socket&apos;</span><br><span class="line">    --- property &apos;_httpMessage&apos; closes the circle</span><br><span class="line">    at JSON.stringify (&lt;anonymous&gt;)</span><br><span class="line">    at stringify (...\node_modules\express\lib\response.js:1123:12)</span><br><span class="line">    at ServerResponse.json (...\node_modules\express\lib\response.js:260:14)</span><br><span class="line">    at ...\vue.config.js:37:41</span><br><span class="line">    at processTicksAndRejections (internal/process/task_queues.js:97:5)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-cli </tag>
            
            <tag> devServer </tag>
            
            <tag> proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仿网易云音乐遇到的坑</title>
      <link href="2020/05/21/%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>2020/05/21/%E4%BB%BF%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>接近一个月没写博客了，这段时间主要在练习一个小项目-<a href="http://caijd.top/163music/src/index.html" target="_blank" rel="noopener">仿网易云音乐</a>。这个项目使用<strong>原生JS和jquery</strong>构建，支持移动端,支持歌单、最新和最热歌曲点播，播放页支持歌词。后台通过leancloud 提供的API搭建。通过这个小项目，我对前后端交互有了更深刻的认识。同时对<strong>MVC和OOP思想</strong>也有了自己的理解。今天我对这段时间学到的新知识和遇到的一些BUG记录下来，以便以后借鉴。</p><h2 id="safari浏览器中的奇怪行为"><a href="#safari浏览器中的奇怪行为" class="headerlink" title="safari浏览器中的奇怪行为"></a>safari浏览器中的奇怪行为</h2><ol><li>在safari中不能<strong>使用js在body中</strong>动态添加<code>background-image:url()</code>。否则会出现body背景图片显示不全的BUG。而其他的浏览器目前没有发现这个问题。</li></ol><p><strong>解决方法：</strong>可以在body中新建一个<code>div</code>元素专门用来作为<code>background-image</code>的容器</p><hr><ol start="2"><li>safari暂时不支持<code>image/webp</code>图片格式<br>现在很多公司为了优化web性能，网页图片都使用google定义的image/webp图片标准。目前chrome、firefox等主流的浏览器都支持它，但safari和IE由于各种原因暂时不支持image/webp。当我们使用webp图片时就会出现图片不显示的问提。所以我们在使用webp之前需要进行浏览器功能检查。</li></ol><p>方法1：尝试加载一张WebP图片，观察是否能够正常加载 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    let WebP = new Image();</span><br><span class="line">    WebP.onload = ()=&gt;&#123;     //支持webp       &#125;    </span><br><span class="line">    WebP.onerror = ()=&gt;&#123;    //不支持webp     &#125;</span><br><span class="line">    WebP.src = &apos;图片url&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：通过canvas中特性来判断<br><code>document.createElement(&#39;canvas&#39;).toDataURL(&#39;image/webp&#39;,0.5).indexOf(&#39;data:image/webp&#39;) === 0</code><br>canvas.toDataURL()默认输出<strong>image/png</strong>格式，当支持webp时，上面的表达式输出<strong>image/webp</strong></p><hr><h2 id="事件中心eventHub和url查询参数"><a href="#事件中心eventHub和url查询参数" class="headerlink" title="事件中心eventHub和url查询参数"></a>事件中心eventHub和url查询参数</h2><p>前端一直在朝着模块化的方向发展，模块的一个功能就是封装方法和属性。那么模块间的数据传递就是摆在我们的眼前的一个难题。模块数据传递目前分为同一页面的数据传递和不同页面的数据传递。</p><h3 id="同一页面数据的传递"><a href="#同一页面数据的传递" class="headerlink" title="同一页面数据的传递"></a>同一页面数据的传递</h3><p>如果多个模块在同一个页面，那么我们可以利用<strong>事件中心eventHub</strong>，通过<strong>发布（emit）和订阅（on）</strong>思想来实现数据的传递。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">window.eventHub = &#123;</span><br><span class="line">  events: &#123;&#125;,</span><br><span class="line">  emit(event,data)&#123;</span><br><span class="line">    if(this.events[event] &amp;&amp; this.events[event].length)&#123;</span><br><span class="line">      this.events[event].forEach((fn)=&gt;&#123;</span><br><span class="line">        fn.call(null,data) </span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  on(event,fn)&#123;</span><br><span class="line">    if(Array.isArray(event))&#123;</span><br><span class="line">      event.forEach((item)=&gt;&#123;</span><br><span class="line">        this.events[item] = this.events[item] || []</span><br><span class="line">        this.events[item].push(fn)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      this.events[event] = this.events[event] || []</span><br><span class="line">      this.events[event].push(fn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="不同页面间的数据传递"><a href="#不同页面间的数据传递" class="headerlink" title="不同页面间的数据传递"></a>不同页面间的数据传递</h3><p>当多个模块不在同一页面时，eventHub没有了全局的基础，这时候我们可以通过<strong>http请求URL的query参数</strong>(?id=1111&amp;name=cai)来实现数据的传递。或者使用更高级的<strong>cookie ,sessionID以及localStorage</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
            <tag> leancloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器同源策略与跨域</title>
      <link href="2020/04/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F/"/>
      <url>2020/04/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>只有<strong>协议、域名和端口号完全一致</strong>的两个网站，才可以资源共享。其中受限制的行为包括：</p><ol><li>AJAX 请求不能发送。（发送了得不到响应）</li><li>Cookie、LocalStorage 和 IndexDB 无法读取。</li><li>DOM 无法获得</li></ol><p>同源策略的目的，是为了保证用户信息的安全。</p><hr><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><h3 id="HTML可以发送请求的元素"><a href="#HTML可以发送请求的元素" class="headerlink" title="HTML可以发送请求的元素"></a>HTML可以发送请求的元素</h3><ol><li><p>form表单和a标签(都会刷新页面,体验不好)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&apos;get&apos; action=&apos;/path&apos; target=&apos;&apos;&gt;&lt;/form&gt;     //将target指向特定的iframe可以间接消除浏览器刷新</span><br><span class="line">&lt;a href=&apos;/path&apos;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>img/link元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let img = document.createElement(&apos;img&apos;)</span><br><span class="line">img.src = &apos;/path&apos;</span><br><span class="line">img.onload = ()=&gt;&#123; ...codeBlock &#125;   //必须返回一个图片才会onload</span><br><span class="line">img.onerror = ()=&gt;&#123; ...codeBlock &#125;</span><br></pre></td></tr></table></figure></li><li><p>script元素<br><img src="/images/SRJ.png" alt="server rendered javascript"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let script = document.createElement(&apos;script&apos;)</span><br><span class="line">script.src = &apos;/path&apos;</span><br><span class="line">document.body.appendChild(&apos;script&apos;) //必须将script加入到dom中，请求才生效</span><br><span class="line">script.onload = (e)=&gt;&#123; ...codeBlock e.currentTarget.remove() &#125;   //先执行服务器返回文本再执行onload回调</span><br><span class="line">script.onerror = ()=&gt;&#123; ...codeBlock &#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="JSONP（json-with-padding）"><a href="#JSONP（json-with-padding）" class="headerlink" title="JSONP（json with padding）"></a>JSONP（json with padding）</h3><p>如同上面方法3，JSONP基本思想是,<strong>动态添加一个script元素</strong>，向服务器请求数据，这种做法不受同源政策限制；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。</p><h2 id><a href="#" class="headerlink" title></a><img src="/images/jsonp.png" alt="jsonp小结"></h2><h4 id="jsonp注意点"><a href="#jsonp注意点" class="headerlink" title="jsonp注意点"></a>jsonp注意点</h4><ol><li>jsonp只能使用get请求</li><li>jsonp中script标签src传入的查询参数约定为<code>?callback=funcName</code>,其中funcName由字母和<strong>随机数</strong>构成</li><li>服务器通过<strong>回调函数的参数</strong>给浏览器传递任意数据</li></ol><hr><h2 id="AJAX（async-javascript-and-XML）和-CORS-cross-origi-resource-sharing"><a href="#AJAX（async-javascript-and-XML）和-CORS-cross-origi-resource-sharing" class="headerlink" title="AJAX（async javascript and XML）和 CORS(cross-origi resource sharing)"></a>AJAX（async javascript and XML）和 CORS(cross-origi resource sharing)</h2><p>早期的前端只能发送简单的get请求。IE 5率先在 JS 中引入<strong>ActiveX</strong>对象，使得 JS 可以直接发起 HTTP 请求（get post put delete）。随后 Mozilla、 Safari、 Opera 也跟进引入了<strong>XMLHttpRequest</strong>对象，最后<strong>XMLHttpRequest</strong>对象被纳入 W3C 规范。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 前端代码 --&gt;</span><br><span class="line">let xhr = new XMLHttpRequest()</span><br><span class="line">xhr.open(&apos;post&apos;,&apos;www.baidu.com&apos;)        // 打开xhr ，并设置mehtod 和 path</span><br><span class="line">xhr.setRequestHeader(&apos;content-type&apos;,&apos;text/javascript;charset=utf8&apos;) //设置请求头</span><br><span class="line">xhr.onreadystatechange = (e)=&gt;&#123;</span><br><span class="line">    if(xhr.readystate === 4)&#123;</span><br><span class="line">        if(xhr.status &gt;=200 &amp;&amp; xhr.status &lt;300)&#123;</span><br><span class="line">            console.log(&apos;请求成功！&apos;)</span><br><span class="line">            let response = xhr.responseText //获取响应字符串</span><br><span class="line">            let json = JSON.parse(response) //将字符串转化为js对象</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        else if(xhr.status &gt;=400)&#123;</span><br><span class="line">            console.log(&apos;请求失败！&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.send()      //添加参数可以设置request body</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 后端代码 --&gt;</span><br><span class="line">if(path === &apos;/path&apos;)&#123;</span><br><span class="line">    response.statusCode = 200</span><br><span class="line">    response.setHeader(&apos;Content-Type&apos;,&apos;text/json;charset=utf-8&apos;)</span><br><span class="line">    response.setHeader(&apos;Access-Control-Allow-Origin&apos;,&apos;http://www.baidu.com:8080&apos;)       //CORS</span><br><span class="line">    response.setHeader(&apos;Access-Control-Allow-Origin&apos;,&apos;*&apos;)   //CORS</span><br><span class="line">    response.write(</span><br><span class="line">        `&#123;</span><br><span class="line">            &quot;a&quot;: 1,</span><br><span class="line">            &quot;b&quot;: 2</span><br><span class="line">        &#125;</span><br><span class="line">        `</span><br><span class="line">    )    </span><br><span class="line">    response.end()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="AJAX常用的API"><a href="#AJAX常用的API" class="headerlink" title="AJAX常用的API"></a>AJAX常用的API</h3><table><thead><tr><th>API</th><th>usage</th></tr></thead><tbody><tr><td>xhr.readystate</td><td>0-close、1-open、 2-send and receive responseHeader responseStatus、3-download and loading、 4-completed</td></tr><tr><td>xhr.status</td><td>状态码 200 400</td></tr><tr><td>xhr.statusText</td><td>状态码文本 ok</td></tr><tr><td>xhr.responseText</td><td>响应</td></tr><tr><td>xhr.getAllResponseHeaders()</td><td>获取所有的响应头</td></tr><tr><td>xhr.getAllResponseHeader(‘’)</td><td>获取响应头</td></tr><tr><td>xhr.setRequestHeader(‘’)</td><td>设置请求头</td></tr><tr><td>JSON.parse(‘’)</td><td>string to json</td></tr><tr><td>JSON.stringify(obj)</td><td>json to string</td></tr></tbody></table><hr><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>由于AJAX存在<strong>同源限制</strong>，所以出现了CORS。CORS就是在服务器端加上响应头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(&quot;Access-Control-Allow-Origin&quot;,path)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> CORS </tag>
            
            <tag> JSONP </tag>
            
            <tag> 同源 </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器输入URL到页面显示全过程</title>
      <link href="2020/04/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E5%85%A8%E8%BF%87%E7%A8%8B/"/>
      <url>2020/04/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E5%85%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器从URL到页面显示的过程"><a href="#浏览器从URL到页面显示的过程" class="headerlink" title="浏览器从URL到页面显示的过程"></a>浏览器从URL到页面显示的过程</h2><p><img src="/images/browser.png" alt="浏览器http请求过程"></p><ol><li>域名解析，返回IP</li><li>发起TCP的3次握手，建立TCP连接</li><li>浏览器发起http请求，服务器响应htp请求</li><li>浏览器解析html代码,并请求html代码中的资源(如js、css、图片等）</li><li>4次挥手,断开TCP连接</li><li>浏览器对渲染页面呈现给用户</li></ol><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>域名解析包括<strong>本地DNS缓存查询和远程DNS查询</strong>。</p><p>本地缓存查询按照浏览器DNS缓存 → 操作系统DNS缓存 → HOSTS文件的顺序依次查找，如果没有找到对应的IP，再进行远程DNS查询。<br>远程DNS查询首先在本地域名服务器（网络接入商提供）缓存上查询，如果没有结果再依次按照根域名服务器 → 顶级域名服务器（.com顶级域名） → 权威域名服务器(二级域名和三级域名)的顺序依次查询，并<strong>将IP依次返回给本地域名服务器、操作系统和浏览器</strong>。</p><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><h4 id="三次握手建立连接"><a href="#三次握手建立连接" class="headerlink" title="三次握手建立连接"></a>三次握手建立连接</h4><p><img src="/images/tcp_connect.png" alt="tcp三次握手"></p><table><thead><tr><th>FLAGS</th><th>meaning</th></tr></thead><tbody><tr><td>SYN</td><td>synchronous 表示请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，一般设置为1</td></tr><tr><td>seq</td><td>sequence 随机序列码</td></tr><tr><td>ACK</td><td>Acknowledgement 确认，表示响应</td></tr><tr><td>ACKFLAG</td><td>确认标志，一般设为1</td></tr><tr><td>ACKNumber</td><td>确认号码，表示期待下一次接受的包序号</td></tr><tr><td>PSH</td><td>push 推送，提示接收端应用程序立即从TCP缓冲区把数据读走</td></tr><tr><td>FIN</td><td>finish 完成，希望断开连接</td></tr><tr><td>RST</td><td>reset 复位，对方要求重新建立连接</td></tr><tr><td>URG</td><td>urgent 紧急指针是否有效。为1，表示某一位需要被优先处理</td></tr></tbody></table><p>在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。<br>第一次握手：建立连接时，客户端发送<strong>SYN包</strong>(<strong>SYN=1</strong>)到服务器，客户端把这段连接的序号<strong>seq设定为随机数x</strong>,进入<strong>SYN_SEND</strong>状态，等待服务器确认；<br>第二次握手：服务器端应当为一个合法的SYN回送一个<strong>SYN/ACK</strong>。ACK的确认码<strong>ACKFLAG=1,ACKNumber=x+1</strong>，SYN/ACK包本身又有一个随机序号<strong>seq=y</strong>此时服务器进入<strong>SYN_RECV</strong>状态；<br>第三次握手：最后，客户端再发送一个<strong>ACK</strong>。此时包的序号<strong>seq被设定为x+1</strong>，而ACK确认码则为<strong>ACKFLAG=1,ACKNumber=y+1</strong>。当服务端收到这个ACK的时候，客户端和服务器进入ESTABLISHED状态，完成了三次握手，客户端与服务器开始传送数据。</p><h4 id="四次挥手关闭连接"><a href="#四次挥手关闭连接" class="headerlink" title="四次挥手关闭连接"></a>四次挥手关闭连接</h4><p><img src="/images/tcp_close.png" alt="tcp四次挥手"><br>连接终止使用了四次挥手过程（four-way handshake），在这个过程中连接的<strong>每一侧都独立地被终止</strong>。当一个端点要停止它这一侧的连接，就向对侧发送FIN，对侧回复ACK表示确认。因此，拆掉一侧的连接过程需要一对FIN和ACK，分别由两侧端点发出。</p><ol><li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li><li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</li><li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</li><li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li><li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</li><li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</li></ol><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p><a href="https://blog.csdn.net/qq_38950316/article/details/81087809" target="_blank" rel="noopener">TCP的三次握手与四次挥手理解及面试题</a><br><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">传输控制协议 wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器的http请求过程</title>
      <link href="2020/04/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84http%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/"/>
      <url>2020/04/19/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84http%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器从URL到页面显示的过程"><a href="#浏览器从URL到页面显示的过程" class="headerlink" title="浏览器从URL到页面显示的过程"></a>浏览器从URL到页面显示的过程</h2><p><img src="/images/browser.png" alt="浏览器http请求过程"></p><ol><li>域名解析，返回IP</li><li>发起TCP的3次握手，建立TCP连接</li><li>浏览器发起http请求，服务器响应htp请求</li><li>浏览器解析html代码,并请求html代码中的资源(如js、css、图片等）</li><li>4次挥手,断开TCP连接</li><li>浏览器对渲染页面呈现给用户</li></ol><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>域名解析包括<strong>本地DNS缓存查询和远程DNS查询</strong>。</p><p>本地缓存查询按照浏览器DNS缓存 → 操作系统DNS缓存 → HOSTS文件的顺序依次查找，如果没有找到对应的IP，再进行远程DNS查询。<br>远程DNS查询首先在本地域名服务器（网络接入商提供）缓存上查询，如果没有结果再依次按照根域名服务器 → 顶级域名服务器（.com顶级域名） → 权威域名服务器(二级域名和三级域名)的顺序依次查询，并<strong>将IP依次返回给本地域名服务器、操作系统和浏览器</strong>。</p><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><h4 id="三次握手建立连接"><a href="#三次握手建立连接" class="headerlink" title="三次握手建立连接"></a>三次握手建立连接</h4><p><img src="/images/tcp_connect.png" alt="tcp三次握手"></p><table><thead><tr><th>FLAGS</th><th>meaning</th></tr></thead><tbody><tr><td>SYN</td><td>synchronous 表示请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，一般设置为1</td></tr><tr><td>seq</td><td>sequence 随机序列码</td></tr><tr><td>ACK</td><td>Acknowledgement 确认，表示响应</td></tr><tr><td>ACKFLAG</td><td>确认标志，一般设为1</td></tr><tr><td>ACKNumber</td><td>确认号码，表示期待下一次接受的包序号</td></tr><tr><td>PSH</td><td>push 推送，提示接收端应用程序立即从TCP缓冲区把数据读走</td></tr><tr><td>FIN</td><td>finish 完成，希望断开连接</td></tr><tr><td>RST</td><td>reset 复位，对方要求重新建立连接</td></tr><tr><td>URG</td><td>urgent 紧急指针是否有效。为1，表示某一位需要被优先处理</td></tr></tbody></table><p>在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。<br>第一次握手：建立连接时，客户端发送<strong>SYN包</strong>(<strong>SYN=1</strong>)到服务器，客户端把这段连接的序号<strong>seq设定为随机数x</strong>,进入<strong>SYN_SEND</strong>状态，等待服务器确认；<br>第二次握手：服务器端应当为一个合法的SYN回送一个<strong>SYN/ACK</strong>。ACK的确认码<strong>ACKFLAG=1,ACKNumber=x+1</strong>，SYN/ACK包本身又有一个随机序号<strong>seq=y</strong>此时服务器进入<strong>SYN_RECV</strong>状态；<br>第三次握手：最后，客户端再发送一个<strong>ACK</strong>。此时包的序号<strong>seq被设定为x+1</strong>，而ACK确认码则为<strong>ACKFLAG=1,ACKNumber=y+1</strong>。当服务端收到这个ACK的时候，客户端和服务器进入ESTABLISHED状态，完成了三次握手，客户端与服务器开始传送数据。</p><h4 id="四次挥手关闭连接"><a href="#四次挥手关闭连接" class="headerlink" title="四次挥手关闭连接"></a>四次挥手关闭连接</h4><p><img src="/images/tcp_close.png" alt="tcp四次挥手"><br>连接终止使用了四次挥手过程（four-way handshake），在这个过程中连接的<strong>每一侧都独立地被终止</strong>。当一个端点要停止它这一侧的连接，就向对侧发送FIN，对侧回复ACK表示确认。因此，拆掉一侧的连接过程需要一对FIN和ACK，分别由两侧端点发出。</p><ol><li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li><li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</li><li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</li><li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li><li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</li><li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</li></ol><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p><a href="https://blog.csdn.net/qq_38950316/article/details/81087809" target="_blank" rel="noopener">TCP的三次握手与四次挥手理解及面试题</a><br><a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">传输控制协议 wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识DOM</title>
      <link href="2020/04/11/%E8%AE%A4%E8%AF%86DOM/"/>
      <url>2020/04/11/%E8%AE%A4%E8%AF%86DOM/</url>
      
        <content type="html"><![CDATA[<img src="/images/dom.png"><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="MDN解释"><a href="#MDN解释" class="headerlink" title="MDN解释"></a>MDN解释</h3><p><strong>文档对象模型(DOM)</strong> 将Document(HTML)与脚本（JavaScript）连接起来。但将HTML、SVG 或 XML 文档建模为对象并不是 JavaScript 语言的一部分。<strong>ECMAScript标准和DOM标准是不同机构（W3C和ECMA）维护的不同的标准</strong>。 DOM模型用一个<strong>逻辑树</strong>来表示一个文档，树的每个分支的终点都是一个节点(node)，每个节点都包含着对象(objects)。DOM的方法(methods)让我们可以改变文档的结构、样式或者内容。</p><h3 id="理解DOM"><a href="#理解DOM" class="headerlink" title="理解DOM"></a>理解DOM</h3><p>浏览器将Document文档通过构造函数构建成Object对象，形成整个逻辑树，就是DOM。在JS中，所有的对象都继承于<strong>Object</strong>。在DOM中，所有的构造函数都继承于<strong>Node函数</strong>。DOM主要有四大接口：Node，Document，ElementText（还有一些不常见的）。</p><h2 id="Node常见的属性和方法"><a href="#Node常见的属性和方法" class="headerlink" title="Node常见的属性和方法"></a>Node常见的属性和方法</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">childNodes,firstChild,lastChild,</span><br><span class="line">nextSibling,previousSibling     //有可能返回文本节点</span><br><span class="line">nodeName,nodeType,nodeValue,</span><br><span class="line">outerText,innerText,textContent</span><br><span class="line">ownerDocument,parentElement,parentNode</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">appendChild()</span><br><span class="line">cloneNode()     // true代表深拷贝且false代表浅拷贝（default）</span><br><span class="line">contains()</span><br><span class="line">hasChildNodes()</span><br><span class="line">insertBefore()</span><br><span class="line">isEqualNode()   //内容一致的node时，返回值是true</span><br><span class="line">isSameNode()    //同一个node时，返回值是true</span><br><span class="line">removeChild()</span><br><span class="line">replaceChild()</span><br><span class="line">normalize() // 常规化</span><br></pre></td></tr></table></figure><h2 id="Document常见的属性和方法"><a href="#Document常见的属性和方法" class="headerlink" title="Document常见的属性和方法"></a>Document常见的属性和方法</h2><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">documentElement, body, links, images forms, scripts, title, head,</span><br><span class="line">characterSet,  doctype,  URL, styleSheets,</span><br><span class="line">childElementCount, children</span><br><span class="line">scrollingElement fullscreen hidden location</span><br><span class="line">onxxxxxx origin plugins readyState </span><br><span class="line">visibilityState</span><br><span class="line">referrer    //返回跳转到当前页面 的**页面的URI**</span><br><span class="line">domain      //document.domain 获取/设置当前文档的原始域部分</span><br></pre></td></tr></table></figure><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">close()</span><br><span class="line">createDocumentFragment()</span><br><span class="line">createElement()</span><br><span class="line">createTextNode()</span><br><span class="line">execCommand()</span><br><span class="line">exitFullscreen()</span><br><span class="line">getElementById()</span><br><span class="line">getElementsByClassName()</span><br><span class="line">getElementsByName()</span><br><span class="line">getElementsByTagName()</span><br><span class="line">getSelection()</span><br><span class="line">hasFocus()</span><br><span class="line">open()</span><br><span class="line">querySelector()</span><br><span class="line">querySelectorAll()</span><br><span class="line">write()</span><br><span class="line">writeln()   // 向文档中写入一串文本，并紧跟着一个换行符。</span><br></pre></td></tr></table></figure><h2 id="Element和Text的API（见MDN）"><a href="#Element和Text的API（见MDN）" class="headerlink" title="Element和Text的API（见MDN）"></a>Element和Text的API（见MDN）</h2><h2 id="几个需要注意的属性和方法"><a href="#几个需要注意的属性和方法" class="headerlink" title="几个需要注意的属性和方法"></a>几个需要注意的属性和方法</h2><ol><li>nextSibling和previousSibling: 有可能返回文本节点</li><li>nodeName: 几乎所有的的标签nodeName都是大写，比如‘DIV’,但是<strong>docu0ment的nodeName是“#document”，svg的nodeName是svg</strong></li><li>nodeType: element对应1,text对应3</li><li>Node.normalize() 方法将当前节点和它的后代节点”规范化“（normalized）。在一个”规范化”后的DOM树中，不存在一个空的文本节点，或者两个相邻的文本节点。“空的文本节点”并不包括空白字符(空格，换行等)构成的文本节点。<br>ps：两个以上相邻文本节点的产生原因包括：<ol><li>通过脚本调用有关的DOM接口进行了文本节点的插入和分割等。</li><li>HTML中超长的文本节点会被浏览器自动分割为多个相邻文本节点。</li></ol></li><li>innerText和textContent的区别<br><img src="/images/differenceInText.png" alt="innerText和textContent的区别"></li><li>html、document和documentElement的联系<br><img src="/images/html.png" alt="html、document和documentElement"></li><li>document.write()和writeln()<br>这两个方法可以在DOM上写入内容。但是要注意document.open()后才可以document.write(),write后执行document.close()。如果此后还需要write内容，那么重新open document会导致DOM内容被覆盖。所以document.write()要<strong>谨慎与定时器</strong>一起使用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js函数</title>
      <link href="2020/04/06/js%E5%87%BD%E6%95%B0/"/>
      <url>2020/04/06/js%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<img src="/images/js_function.png"><h2 id="js函数的5种申明方式："><a href="#js函数的5种申明方式：" class="headerlink" title="js函数的5种申明方式："></a>js函数的5种申明方式：</h2><p>函数一定有一个返回值，即使我们申明时没有return,js会自己添加<code>return undefined</code>。</p><ol><li>具名函数<br><code>function add(x,y){return x+y}    //add.name === &#39;add&#39;</code></li><li>具名函数表达式<br><code>let fn = function add(x,y){return x+y}   //fn.name ===&#39;add&#39;</code></li><li>匿名函数表达式<br><code>let fn = function (x,y){return x+y}    //fn.name === &#39;fn&#39;</code></li><li>new Function()<br><code>let fn = new Function(&#39;x&#39;,&#39;y&#39;,&#39;return x+y&#39;)   //fn.name === &#39;anonymous&#39;</code></li><li>ES6箭头函数（只能匿名）<br><code>let fn = (x,y) =&gt; {return x+y}   //fn.name === &#39;fn&#39;</code></li></ol><p>方法1和方法2申明的区别：</p><ol><li>方法1<code>变量add</code>有申明提升的效果而方法2中<code>变量add</code>不会变量提升。</li><li>方法1中<code>add()</code>在add函数内部和外部都可以被调用，但方法2中<code>add()</code>只能在add函数内部被调用。</li></ol><h2 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h2><ol><li><code>fn(param1,param2)</code></li><li><code>obj.fn()</code></li><li><code>fn.call(undefined/null,param1,param2)</code></li><li><code>fn.apply(thisArg, [argsArray])</code></li></ol><h2 id="this和arguments"><a href="#this和arguments" class="headerlink" title="this和arguments"></a>this和arguments</h2><p><code>函数调用：fn.call(this,arg1,arg2,...)</code><br>其中，<code>this</code>就是第一个参数；<code>arguments</code>是除第一个参数外其他参数组成的的伪数组。</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><code>this</code>设计目的就是在函数体内部，指代函数当前的<em>运行环境</em>。<code>this</code>在<strong>函数调用</strong>时才被确定。它的本质是fn.call(context,arg)传入的第一个参数，一般来说<code>传入的context</code>是个对象。非严格模式下，当传入undefined/null时，this指代window全局对象；严格模式下(“use strict”),传入undefined/null或者任何数据类型，this值都直接指代传入的值。实现的结果如下：</p><ol><li><code>fn(param1,param2)</code> this指向window</li><li><code>obj.fn()</code> this指向obj（通过对象方法调用时，this指向最后调用函数的对象）</li><li>箭头函数内部this跟函数外部this一致，箭头函数没有arguments变量</li><li><code>new fn()</code>中的this指向被创建的新对象本身</li></ol><h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p>作用域就是js<strong>变量的可访问范围</strong>，它决定了变量的可见性和生命周期。函数在<strong>定义时</strong>，就已经决定了它的作用域。作用域分为全局作用域、局部（函数）作用域和块级作用域（let/const)。作用域可以嵌套，嵌套内部作用域可以访问嵌套外部的变量，这样就形成了<strong>作用域链</strong>。<br>作用域链是<strong>变量</strong>的可访问范围。<br>原型链是<strong>对象属性</strong>的可访问范围。</p><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>作用域在<strong>函数定义时</strong>就已经确定。但是此时确定的只是<strong>变量的可访问范围</strong>，变量的<strong>值并不会确定不变</strong>，所以<strong>函数调用时变量的值由调用时决定</strong>。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p><strong>函数和lexical environment词法环境（包括作用域链）</strong>捆绑在一起构成闭包（closure）。也就是说，闭包可以让你从内部函数访问外部函数作用域。在 JavaScript 中，每当函数被创建，就会在函数生成时生成闭包。所以，我们看到有人说一个函数return一个函数就是闭包的说法是错误的，这只是在利用闭包而已。我们<strong>在返回一个函数的同时也返回了这个函数的词法环境（作用域链）</strong>，这样我们就可以在函数外部访问到函数内部的变量了。</p><h2 id="callStack"><a href="#callStack" class="headerlink" title="callStack"></a>callStack</h2><p>js函数调用时会被压入callstack中，标记好，等待函数执行完成(return;)时，会再把函数弹出callstack中。</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组</title>
      <link href="2020/04/05/js%E6%95%B0%E7%BB%84/"/>
      <url>2020/04/05/js%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>js 数组就是有序数据的集合。数组的本质是<strong>原型链中有Array.prototype的对象</strong>。Array对象是用于构造数组的全局对象。</p><h2 id="申明数组"><a href="#申明数组" class="headerlink" title="申明数组"></a>申明数组</h2><ol><li><code>let arr = [1,2,3]</code></li><li><code>let arr = new Array(3)   //new可以省略，声明一个length为3的空数组，arr[1] === undefined</code></li><li><code>let arr = new Array(3,3)   //new可以省略，声明一个数组[3,3]</code></li></ol><h2 id="伪数组"><a href="#伪数组" class="headerlink" title="伪数组"></a>伪数组</h2><p>拥有数字key和length属性，但原型链中<em>没有Array.prototype</em>的对象称为伪数组。常见的伪数组有：arguments对象、DOM操作中获得的Elements集合。</p><h2 id="数组常用的API"><a href="#数组常用的API" class="headerlink" title="数组常用的API"></a>数组常用的API</h2><ol><li><p>Array.prototype.forEach()<br><code>arr.forEach(callback)  //数组的每个元素执行一次callback函数。</code> </p></li><li><p>Array.prototype.sort()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//升序排列</span><br><span class="line">let numbers = [4, 2, 5, 1, 3]; </span><br><span class="line">numbers.sort((a, b) =&gt; a - b);          // 在原数组上排序，改变原数组</span><br></pre></td></tr></table></figure></li><li><p>Array.prototype.join()<br><code>let string = arr.join(&#39;,&#39;)  //将数组的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符</code></p></li><li><p>Array.prototype.concat()<br><code>let newArr = arr1.concat(arr2,arr3)  //合并两个或多个数组。不更改现有数组，而是返回一个新数组。</code> </p></li><li><p>Array.prototype.toString()<br><code>toString()返回一个字符串，表示指定的数组及其元素。</code></p></li><li><p>Array.prototype.map()<br>返回一个新数组，其结果是原数组中的每个元素都调用callback函数后返回的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const array1 = [1, 4, 9, 16];</span><br><span class="line">// pass a function to map</span><br><span class="line">const newMap = array1.map(x =&gt; x * 2);</span><br></pre></td></tr></table></figure></li><li><p>Array.prototype.filter()<br><code>let newArray = array.filter(word =&gt; word.length &gt; 6);    //返回一个新数组, 其包含通过所提供函数实现的测试的所有元素</code> </p></li><li><p>Array.prototype.reduce()<br>对数组中的每个元素执行一次reducer函数(升序执行)，并返回最终的ACC结果。</p><pre><code>const array1 = [1, 2, 3, 4];const reducer = (accumulator, currentValue) =&gt; accumulator + currentValue;console.log(array1.reduce(reducer));     // 1 + 2 + 3 + 4console.log(array1.reduce(reducer, 5));  // 5 + 1 + 2 + 3 + 4</code></pre></li><li><p>Array.from(arrayLike)<br> 传入伪数组，返回一个数组</p></li><li><p>Array.isArray(object)<br>传入一个对象，判断是否是数组，返回值boolean</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js全局对象和原型链</title>
      <link href="2020/03/29/js%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>2020/03/29/js%E5%85%A8%E5%B1%80%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="全局对象global-浏览器window"><a href="#全局对象global-浏览器window" class="headerlink" title="全局对象global(浏览器window)"></a>全局对象global(浏览器window)</h2><p>ECMAScript 规定全局对象叫做 global，但是浏览器把 window 作为全局对象。window 的属性就是全局变量。其中的全局变量分为两种：</p><ol><li>ECMAScript规定的，例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">global.parseInt()</span><br><span class="line">global.parseFloat()</span><br><span class="line">global.Number</span><br><span class="line">global.String</span><br><span class="line">global.Boolean</span><br><span class="line">global.Object</span><br></pre></td></tr></table></figure></li></ol><hr><ol start="2"><li>浏览器自己规定的，例如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">window.alert()</span><br><span class="line">window.prompt()</span><br><span class="line">window.comfirm()</span><br><span class="line">window.console.log()</span><br><span class="line">window.console.dir()</span><br><span class="line">window.document</span><br><span class="line">window.document.createElement()</span><br><span class="line">window.document.getElementById()</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let n = 11          //基本number数据类型</span><br><span class="line">let n = Number(&apos;11&apos;);   //显式转化成number类型</span><br><span class="line">let n = new Number(11)  //创建number对象，有toString()和valueOf()方法</span><br><span class="line">11.toString()   //11本身没有toString()方法，当调用toString()时，11会临时转化成Number对象，当toString()调用结束，11会再次变成基本number类型（隐式转换）</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let n = &apos;22&apos;         //基本string数据类型</span><br><span class="line">let n = String(&apos;11&apos;);   //显式转化成string类型</span><br><span class="line">let n = new String(11)  //创建string对象，有toString()和valueOf()方法</span><br></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let n = true         //基本Boolean数据类型</span><br><span class="line">let n = Boolean(&apos;11&apos;);   //显式转化成Boolean类型</span><br><span class="line">let n = new Boolean(11)  //创建Boolean对象，有toString()和valueOf()方法</span><br></pre></td></tr></table></figure><hr><h2 id="proto-和-prototype"><a href="#proto-和-prototype" class="headerlink" title="proto 和 prototype"></a><strong>proto</strong> 和 prototype</h2><p>所有的对象都有toString()和valueOf()方法，js将这些公用属性都放在<code>__proto__</code>对象中。而为了防止<code>__proto__</code>对象因没被引用而被垃圾回收，所以就有了<code>Object.prototype</code>。<code>__proto__</code>是存在于对象实例中，prototype是存在于构造函数中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象实例.__proto__ === 构造函数.protoType</span><br><span class="line">let obj = new Object()   //obj.__proto__ === Object.prototype</span><br></pre></td></tr></table></figure><h3 id="对象原型链关系图："><a href="#对象原型链关系图：" class="headerlink" title="对象原型链关系图："></a>对象原型链关系图：</h3><p><img src="/images/proto.png" alt="js对象与原型链"></p><hr><h3 id="几个难懂的原型链"><a href="#几个难懂的原型链" class="headerlink" title="几个难懂的原型链"></a>几个难懂的原型链</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.__proto__ ==== null</span><br><span class="line">Function.__proto__ === Function.prototype</span><br><span class="line">Object.__proto__ === Function.prototype</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数据类型</title>
      <link href="2020/03/28/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2020/03/28/js%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="js简史"><a href="#js简史" class="headerlink" title="js简史"></a>js简史</h2><p>1991年，Tim Berners-Lee发明www万维网<br>1992年，Tim Berners-Lee 及其同事发明了css<br>1993年， w3c万维网联盟出现<br>1995年，Netscape公司推出了navigator浏览器，js之父Brendan Eich用十天时间开发出了js（mocha）。之后，Unicode发布了utf-8<br>1996年，Microsoft发布了IE浏览器和JScript<br>Netscape开源firefox浏览器，由Mozilla委员会维护。向ECMA(欧洲计算机制造商协会)申报标准并起名ECMAScript.<br>2004年 ， Microsoft发布IE5.5，使js可以发送http请求<br>Gmail的出现，让人们认识到js不仅仅是脚本玩具语言，也可以成为真正的编程语言<br>2010年，front-end行业出现</p><p>ES3 :标准库少  → ES5：IE7不支持 → ES6：IE8不支持<br>ES6借鉴了rails社区coffeeScript的很多特性：类、箭头函数等，集大家之所长<br>后来es每年一更新</p><h2 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h2><p>js有七种数据类型<br>基本类型:<strong>number,string,boolean,symbol,null,undefined</strong><br>复杂类型：<strong>object</strong>(包括array,function,date等)</p><h2 id="number"><a href="#number" class="headerlink" title="number"></a>number</h2><p>js中实际上没有整数和小数之分，所有的数字均以<strong>64位浮点</strong>数存储。 它的表示方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">十进制表示法：0.1  .1   1e-1 </span><br><span class="line">二进制表示法：0b0101010     #以0b开头</span><br><span class="line">八进制表示法：0o0101010     #以0开头，ES5新添以0o开头</span><br><span class="line">十六进制表示法：0x0101010   #以0x开头</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ol><li>Number(anything)</li><li>parseInt(str)</li><li>parseFloat(str)</li><li>anything - 0</li><li>+(anything)</li></ol><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h3 id="空字符串：’’-（区别于空格字符串’-‘"><a href="#空字符串：’’-（区别于空格字符串’-‘" class="headerlink" title="空字符串：’’    （区别于空格字符串’   ‘)"></a>空字符串：’’    （区别于空格字符串’   ‘)</h3><h3 id="多行字符串："><a href="#多行字符串：" class="headerlink" title="多行字符串："></a>多行字符串：</h3><ol><li><p>借鉴于bash中语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;aaaa\</span><br><span class="line">bbbb&apos;               // 结果为&quot;aaaa↵bbbb&quot;   (不推荐使用)</span><br></pre></td></tr></table></figure></li><li><p><code>&#39;aaaa&#39; + &#39;bbbb&#39;              // 结果为aaaabbbb   (推荐使用)</code></p></li><li><p>es6新语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`aaaa</span><br><span class="line">bbbb                // 结果为&quot;aaaa↵bbbb&quot;   (推荐使用)</span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ol><h3 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h3><p>Base64就是一种基于64个可打印字符(52个大小写字母、10个数字以及+、/h和=)来表示二进制数据的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.btoa(str)  //创建一个base64编码的字符串</span><br><span class="line">window.atob(str)  //解码base64编码的字符串</span><br></pre></td></tr></table></figure><p>如果str中包含汉字，上面的方法会报错。这时候需要使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.btoa(encodeURIComponent(str))  //创建包含非ASCII(如汉字)的str的base64</span><br><span class="line">decodeURI(window.atob(str))  //解码base64</span><br></pre></td></tr></table></figure><h3 id="类型转换-1"><a href="#类型转换-1" class="headerlink" title="类型转换"></a>类型转换</h3><ol><li>String(anything)</li><li>toString(anything)</li><li>‘’ + anything</li></ol><h2 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h2><p>boolean只有true和false。<br>a &amp;&amp; b : 只有两个都为真时，表达式结果为真<br>a || b ：只有两个都为假时，表达式结果为假</p><ol><li>5个false值：’’ ,null,undefined,0,NaN</li><li>所有的对象都是true</li></ol><h3 id="类型转换-2"><a href="#类型转换-2" class="headerlink" title="类型转换"></a>类型转换</h3><ol><li>Boolean(anything) </li><li>!!anything </li></ol><h2 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h2><p>Symbol()用来生成一个<strong>全局唯一</strong>的值。</p><h2 id="null和undefined"><a href="#null和undefined" class="headerlink" title="null和undefined"></a>null和undefined</h2><p>它们都表示没有值。</p><ol><li>(规范)一个变量没有被赋值，那么这个变量的值就是 undefined</li><li>(习惯)如果想表示一个还没赋值的对象，就用 null。如果想表示一个还没赋值的字符串/数字/布尔/symbol，就用 undefined（但是实际上直接 var xxx 一下就行了，不用写 var xxx = undefined）</li></ol><h2 id="object"><a href="#object" class="headerlink" title="object"></a>object</h2><p>object是基本类型数据无序组合的一种hashTable。</p><ol><li>object 的 key 一律是字符串，不存在其他类型的 key</li><li>object[‘’] 是合法的</li><li>object[‘key’] 可以写作 object.key</li><li>object的key不加’’时，只能是合法的标识符（满足以字母、_、$开头的字符串）或者纯数字，object的key加上’’时，可以是任意的unicode字符串</li><li>删除对象key：delete object.key 。删除后object.key==undefined &amp;&amp; key in object ==false</li><li>遍历对象key：for(key in object) {code block…}</li><li>获取对象所有的key： Object.keys(obj)</li><li>获取对象所有的value： Object.keys(obj)</li></ol><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>typeof是一个判断变量或者表达式数据类型的<strong>操作符</strong>。使用方法：typeof <variable>或者 typeof(variable)</variable></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//正常结果</span><br><span class="line">typeof 111) === &apos;number&apos;</span><br><span class="line">typeof &apos;111&apos; === &apos;string&apos;</span><br><span class="line">typeof true === &apos;boolean&apos;</span><br><span class="line">typeof Symbol() === &apos;symbol&apos;</span><br><span class="line">typeof undefined === &apos;undefined&apos;</span><br><span class="line">typeof &#123;&#125; === &apos;object&apos;</span><br><span class="line"></span><br><span class="line">//非常规结果</span><br><span class="line">typeof null === &apos;object&apos;</span><br><span class="line">typeof [] === &apos;object&apos;      </span><br><span class="line">typeof function()&#123;&#125; === &apos;function&apos;    #并没有function类型</span><br></pre></td></tr></table></figure><h3 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h3><p>由于typeof存在一些bug，所以准确判断一个变量的类型可以用<strong>Object.prototype.toString.call(<variable>)</variable></strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Object.prototype.toString.call(111) === &apos;[object,Number]&apos;</span><br><span class="line">Object.prototype.toString.call(&apos;111&apos;) === &apos;[object,String]&apos;</span><br><span class="line">Object.prototype.toString.call(true) === &apos;[object,Boolean]&apos;</span><br><span class="line">Object.prototype.toString.call(Symbol()) === &apos;[object,Symbol]&apos;</span><br><span class="line">Object.prototype.toString.call(undefined) === &apos;[object,Undefined]&apos;</span><br><span class="line">Object.prototype.toString.call(&#123;&#125;) === &apos;[object,Object]&apos;</span><br><span class="line">Object.prototype.toString.call(null) === &apos;[object,Null]&apos;</span><br><span class="line">Object.prototype.toString.call([]) === &apos;[object,Array]&apos;      </span><br><span class="line">Object.prototype.toString.call(function()&#123;&#125;) === &apos;[object,Function]&apos;    #并没有function类型</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法和数据结构入门</title>
      <link href="2020/03/15/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8/"/>
      <url>2020/03/15/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="算法的特点"><a href="#算法的特点" class="headerlink" title="算法的特点"></a>算法的特点</h3><ol><li>输入；</li><li>输出；</li><li>明确性；</li><li>有限性；</li><li>有效性（可行性）</li></ol><h3 id="伪代码和流程图"><a href="#伪代码和流程图" class="headerlink" title="伪代码和流程图"></a>伪代码和流程图</h3><ol><li>伪代码<br>伪代码（Pseudocode）是一种非正式的，类似于英语结构的，用于描述算法的语言。使用伪代码使被描述的算法可以容易地以任何一种编程语言（Pascal，C，Java等）实现。</li><li>流程图<br>流程图是使用图形表示算法的一种方式。其中圆角矩形表示开始和结束，矩形表示正常的运算，棱形表示判断语句，箭头表示运算顺序。</li></ol><h3 id="常见的算法思想"><a href="#常见的算法思想" class="headerlink" title="常见的算法思想"></a>常见的算法思想</h3><ol><li>分治法（前端最常用的算法思想）</li><li>动态规划法</li><li>贪婪法</li><li>线性规划法</li><li>精并法</li></ol><h3 id="常用的排序算法"><a href="#常用的排序算法" class="headerlink" title="常用的排序算法"></a>常用的排序算法</h3><ol><li>冒泡排序-两两比较，视情况而定交换位置。时间复杂度为O(n^2)</li><li>选择排序-依次选择最大或者最小的放在最前面</li><li>插入排序-每步将一个待排序的记录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。类似于‘起扑克牌’</li><li>快速排序法-通过一次排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序</li><li>计数排序法-借助hash表的特殊的桶排序，空间换换时间。复杂度Ο(n+k)‘类似于玩空当接龙’</li><li>基数排序<br>在<a href="https://visualgo.net" target="_blank" rel="noopener">visualgo.net</a>上能可视化排序算法的实现过程。</li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><p>数据结构(data structure)是<strong>带有结构特性的数据元素的集合</strong>。数据结构是计算机存储、组织数据的方式。通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率。数据结构往往同高效的检索算法和索引技术有关，<strong>算法离不开数据结构</strong>，在规划算法前，要先想好<strong>数据结构</strong>。js中简单的数据结构包括<strong>数组和对象。</strong></p><h3 id="常见的几种数据结构"><a href="#常见的几种数据结构" class="headerlink" title="常见的几种数据结构"></a>常见的几种数据结构</h3><ol><li><p>hash（哈希表）<br>散列表（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的数据结构。在js中，一个对象就可以称为一个hash table。<br>在桶排序和计数排序中就用到了hash表。</p></li><li><p>queue（队列）<br>queue是一种特殊的线性表，它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作。进行插入操作的端称为<strong>队尾</strong>，进行删除操作的端称为<strong>队头</strong>。队列中没有元素时，称为<strong>空队列</strong>。<br>特点：</p><ol><li>先进先出</li><li>js中可以用数组实现（push，shift）</li><li>类似于‘排队，先排队的在前面就会先出去，前面的地方就是<strong>队头</strong>，后面的地方就是<strong>队尾</strong>’</li></ol></li><li><p>stack（栈）<br>stack在计算机科学中是限定仅在<strong>表尾</strong>进行插入或删除操作的线性表。进行删除和插入的一端称<strong>栈顶</strong>，另一端称<strong>栈底</strong>。插入一般称为<strong>进栈</strong>，删除则称为<strong>退栈</strong>。 栈也称为<strong>后进先出表</strong>。<br>特点：</p><ol><li>后进先出</li><li>js中可以用数组实现（push，pop）</li><li>类似于‘往桶里放东西，后放进去的在上面就会被先拿出来，桶的的上方就是<strong>栈顶</strong>，底部就是<strong>栈底</strong>’</li></ol></li><li><p>链表<br>链表是一种非连续、非顺序的数据结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成。<strong>每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</strong></p><ol><li>线性表的缺点就是<strong>删除元素麻烦</strong>，链表是非线性表它的缺点是<strong>查询元素麻烦</strong>。</li><li>链表一般包括head和node</li></ol></li><li><p>树<br>树是一种数据结构，它是由n（n&gt;=0）个有限结点组成一个具有层级结构的集合。每个结点有零个或多个子结点；没有父结点的结点称为<strong>根结点</strong>，没有子结点的结点称为<strong>叶子结点</strong>。<strong>结点的层次</strong>：从根开始定义起，根为第1层，根的子结点为第2层，以此类推。一棵树中所有结点的层次的最大值称为这棵树的<strong>深度</strong>。</p><ol><li>二叉树：每个节点最多含有两个子树的树称为二叉树；</li><li>满二叉树：除最后一层无任何子节点外，每一层上的所有结点都有两个子结点的二叉树。</li><li>完全二叉树：完全二叉树是由满二叉树而引出来的。满二叉树最后一层的最后的结点<strong>连续的</strong>丢失掉形成的树。</li><li>满二叉树和完全二叉树可以用js数组实现，其他的树需要用链表实现。</li></ol></li><li><p>堆（heap）<br>堆是特殊的完全二叉树。堆中<strong>某个节点的值总是不大于或不小于其父节点的值</strong>。当根节点的值是最大的值时，这样的堆称为<strong>最大堆</strong>。当根节点的值最小时，称为<strong>最小堆</strong>。</p></li></ol><p><strong>堆排序</strong>就是兄弟节点和父节点比较取最大值作为新的父节点，不断的构成最大堆或者最小堆，由此达到排序目的的算法。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML入门</title>
      <link href="2020/03/13/HTML%E5%85%A5%E9%97%A8/"/>
      <url>2020/03/13/HTML%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>HTML全称<strong>Hypertext markup language</strong>，它是整个网页的内容（骨架）。学习HTML就是要掌握好它常用的标签，html标签在网页中又叫html元素。它分为block元素，inline元素和inline-block元素。这些都只是标签默认的属性，实际开发中都可以通过css改变。</p><h2 id="HTML版本"><a href="#HTML版本" class="headerlink" title="HTML版本"></a>HTML版本</h2><p>HTML版本主要有：HTML 4.01 → XHTML → HTML 5 → HTML 5.1，由W3C根据浏览器实际情况编写文档。<code>&lt;!DOCTYPE HTML&gt;</code>用来声明文档类型。</p><h2 id="HTMl标签"><a href="#HTMl标签" class="headerlink" title="HTMl标签"></a>HTMl标签</h2><h3 id="常见的html标签"><a href="#常见的html标签" class="headerlink" title="常见的html标签"></a>常见的html标签</h3><p><code>(html、body、head）、a、form、input、button、h1(h2、h3 )、p、ul、ol、small、strong、div、span、kbd、video、audio、svg。</code>这些标签除了div和span，其他标签都有默认样式。</p><h3 id="空标签"><a href="#空标签" class="headerlink" title="空标签"></a>空标签</h3><p>空标签里面不能有内容（子元素），通常在一个空元素上不需要使用闭合标签。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;br /&gt; 换行标签，通常用于文本格式换行</span><br><span class="line">&lt;hr/&gt; 水平分割线</span><br><span class="line">&lt;input /&gt;  用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。</span><br><span class="line">&lt;link /&gt; 指定了外部资源与当前文档的关系. 这个元素的使用方法包括为导航定义关系框架.这个元素经常用来链接css文件。</span><br><span class="line">&lt;img /&gt; 文档中的图像。</span><br><span class="line">&lt;meta /&gt; 元素表示那些不能由其它HTML元相关元素 (&lt;base&gt;, &lt;link&gt;, &lt;script&gt;, &lt;style&gt; 或 &lt;title&gt;) 之一表示的任何元数据信息. </span><br><span class="line"></span><br><span class="line">&lt;isindex /&gt; 使浏览器显示一个对话框，提示用户输入单行文本。</span><br><span class="line">&lt;area /&gt; 在图片上定义一个热点区域</span><br><span class="line">&lt;param /&gt;  定义了 &lt;object&gt;的参数</span><br><span class="line">&lt;col /&gt; 定义表格中的列，并用于定义所有公共单元格上的公共语义。它通常位于`&lt;colgroup&gt;`元素内。</span><br><span class="line">&lt;bgsound /&gt; IE浏览器中设置网页背景音乐的元素。</span><br><span class="line">&lt;wbr /&gt; 一个文本中的位置，其中浏览器可以选择来换行，虽然它的换行规则可能不会在这里换行。</span><br><span class="line">&lt;base /&gt; 指定用于一个文档中包含的所有相对URL的基本URL。</span><br><span class="line">&lt;nextid /&gt;  是一个过时的 HTML 元素, 它使下一个 web 设计工具能够为其定位点生成自动名称标签。 它是由该 web 编辑工具自动生成的, 不需要手动调整或输入。这个元素的区别是成为第一个元素, 成为一个 &quot;丢失的标签&quot; 被淘汰的官方公共 DTD 的 HTML 版本。</span><br><span class="line">&lt;basefont /&gt; 用来设置文档的默认字体大小。（目前已废弃 ）</span><br><span class="line">&lt;embed /&gt; 用于表示一个外部应用或交互式内容的集合点，换句话说，就是一个插件。 </span><br><span class="line">&lt;keygen /&gt;  为了方便生成密钥材料和提交作为 [HTML form]的一部分的公钥.这种机制被用于设计基于 Web 的证书管理系统。(已废弃)</span><br><span class="line">&lt;plaintext /&gt; 将起始标签后面的任何东西渲染为纯文本，不会解释为 HTML。它没有闭合标签，因为任何后面的东西都会看做纯文本。(已废弃)</span><br><span class="line">&lt;spacer /&gt; 它可以向页面插入间隔。它由 Netscape 设计，用于实现单像素布局图像的相同效果，Web 设计师用它来向页面添加空白，而不需要实际使用图片。（已废弃）</span><br></pre></td></tr></table></figure><h3 id="可替换元素"><a href="#可替换元素" class="headerlink" title="可替换元素"></a>可替换元素</h3><p>可替换元素（replaced element）的内容不受当前文档的样式的影响，CSS 可以影响可替换元素的位置，但不会影响到可替换元素自身的内容。例如：<code>&lt;img&gt; &lt;iframe&gt; &lt;video&gt; &lt;embed&gt;</code>,某些元素仅在特定的情况下是可替换元素，例如：<code>&lt;option&gt; &lt;audio&gt; &lt;canvas&gt; &lt;object&gt; &lt;applet&gt; &lt;input&gt;</code>.用 CSS <code>content</code> 属性插入的对象是匿名的可替换元素。它们并不存在于 HTML 标记中，因此是“匿名的”。</p><h3 id="几个重点标签"><a href="#几个重点标签" class="headerlink" title="几个重点标签"></a>几个重点标签</h3><h4 id="iframe和a标签"><a href="#iframe和a标签" class="headerlink" title="iframe和a标签"></a>iframe和a标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&apos;https://qq.com&apos; name=&apos;page1&apos; frameborder=&apos;0&apos;&gt;   //嵌套页面 页面默认大小是100*50px</span><br><span class="line">&lt;a href=&apos;#&apos; target=&apos;_self&apos;&gt;Hello&lt;/a&gt;  //跳转标签（get请求）</span><br></pre></td></tr></table></figure><ol><li><p>a标签的target取值：<code>_self(defaults) _blank  _parent _top framename</code><br>其中_parent和_top是结合iframe嵌套父子关系来确定的。通过指定target=’framename’可以使页面在对应的iframe中显示。</p></li><li><p>通过a标签下载文件</p><ol><li>通过指定a标签的download属性可以强制文件下载。</li><li>如果不加download，而且http响应的内容浏览器不能展示那么文件也会被下载，例如：content-type:application/octet-stream.</li></ol></li><li><p>a标签herf=’’的取值：(最好不要用file协议（file:///)来打开文件。)</p><ol><li><code>http(s)://XXX</code>    http/https协议地址。    （例如 <a href="http://qq.com" target="_blank" rel="noopener">http://qq.com</a>) 浏览器会向服务器发送get请求</li><li><code>//XXX</code>        继承当前文件协议。 （例如 //qq.com) 浏览器会向服务器发送get请求</li><li><code>XXX</code>          相对路径。 （例如 qq.com) ，浏览器会向服务器发送get请求</li><li><code>#XXX</code>     锚点。跳转到当前页面指定的id处，且锚点会添加到url后面，但是浏览器不会向服务器发送请求</li><li><code>?name=cai</code>  浏览器会向服务器发送get请求 ,查询字符串会添加到url后面</li><li><code>javascipt:;</code> javascript伪协议。</li></ol></li></ol><h4 id="form和input标签"><a href="#form和input标签" class="headerlink" title="form和input标签"></a>form和input标签</h4><p>form和a标签都可以发起请求。a只能发起get请求，form既可以发get,也可以发post请求。不过form一般用来发post请求，提交表单内容。它们target属性的功能也是一样的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&apos;index.php&apos; method=&apos;post&apos; target=&apos;&apos;&gt;</span><br><span class="line">    &lt;input type=&apos;password&apos; name=&apos;XXX&apos; value=&apos;&apos;&gt; </span><br><span class="line">    &lt;input type=&apos;checkbox&apos; name=&apos;XXX&apos; value=&apos;&apos;&gt; </span><br><span class="line">    &lt;input type=&apos;radio&apos; name=&apos;XXX&apos; value=&apos;&apos;&gt; </span><br><span class="line">    &lt;select name=&apos;hobby&apos; multiple&gt;</span><br><span class="line">        &lt;option value=&apos;basketball&apos;&gt;basketball&lt;/opiton&gt;</span><br><span class="line">        &lt;option value=&apos;baseball&apos; disabled&gt;baseball&lt;/opiton&gt;</span><br><span class="line">        &lt;option value=&apos;soccer&apos;&gt;soccer&lt;/opiton&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;textarea style=&apos;resize:none&apos; name=&apos;info&apos;&gt;&lt;/textarea&gt;  </span><br><span class="line">    &lt;input type=&apos;submit&apos; name=&apos;XXX&apos; value=&apos;&apos;&gt; </span><br><span class="line">    &lt;button&gt;button&lt;/button&gt;     当表单中没有提交按钮，那么未设置type的button按钮会自动升级为submit按钮</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><ol><li>form中的input<strong>必须添加name和value属性</strong>，它们在提交的时候会以键值对的形式发送给服务器。这时候name和id意义不同。</li><li>input[type=’checkbox’]和input[type=’radio’]可以通过name属性给选项分组，radio默认value是’on’.</li><li>label指定标签的两种用法：<ol><li>指定for<br> <code>&lt;label for=&#39;check&#39;&gt;性别&lt;/label&gt;&lt;input id=&#39;check&#39; type=&#39;checkbox&#39; name=&#39;sex&#39; value=&#39;man&#39;&gt;man</code></li><li>label包裹input<br><code>&lt;label&gt;性别&lt;input id=&#39;check&#39; type=&#39;checkbox&#39; name=&#39;sex&#39; value=&#39;man&#39;&gt;man&lt;/label&gt;</code></li></ol></li><li>textarea 默认是可变尺寸的。通过css <code>resize:none</code>可以取消默认样式。宽度和高度也最好用css来设置，rows和cols属性不可靠，尤其是cols。</li><li>input[type=button]和button标签的区别：input是空标签，button不是；而且<strong>未设置type的button可以自动升级为submit</strong>。</li></ol><h4 id="table标签"><a href="#table标签" class="headerlink" title="table标签"></a>table标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">&lt;colgroup&gt;</span><br><span class="line">&lt;col bgcolor=&apos;red&apos; width=&apos;100&apos;&gt;</span><br><span class="line">&lt;col bgcolor=&apos;red&apos; width=&apos;100&apos;&gt;</span><br><span class="line">&lt;col bgcolor=&apos;red&apos; width=&apos;100&apos;&gt;</span><br><span class="line">&lt;col bgcolor=&apos;red&apos; width=&apos;100&apos;&gt;</span><br><span class="line">&lt;col bgcolor=&apos;red&apos; width=&apos;100&apos;&gt;</span><br><span class="line">&lt;/colgroup&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;班级&lt;/th&gt;&lt;th&gt;语文&lt;/th&gt;&lt;th&gt;数学&lt;/th&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;小明&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;td&gt;60&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;小红&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt;49&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;小明&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;td&gt;60&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;td&gt;小红&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;58&lt;/td&gt;&lt;td&gt;49&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;tfoot&gt;</span><br><span class="line">&lt;tr&gt;&lt;th&gt;平均分&lt;/th&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;50&lt;/td&gt;&lt;td&gt;80&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/tfoot&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure><ol><li>以上是table的完整结构，其中colgroup、thead、tbody和tfoot的顺序可以打乱，浏览器会自动调整好顺序thead→tbody→ tfoot。</li><li>如果不加thead、tbody和tfoot这些标签，那么浏览器会自动把内容放入tbody中。</li><li>colgroup可以设置table的部分样式。css中<code>border-collapse:collapse</code>可以设置table的border样式。</li></ol>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http入门</title>
      <link href="2020/03/07/http%E5%85%A5%E9%97%A8/"/>
      <url>2020/03/07/http%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>在之前的一段时间的里我着重去学习了 html,css,js 以及 vue 等应用类知识点，而忽略了 http 的学习，导致遇到问题有些力不从心，无法洞悉问题的本质，所以这几天重新学习了一下 http。</p><h2 id="www（world-wide-web）"><a href="#www（world-wide-web）" class="headerlink" title="www（world wide web）"></a>www（world wide web）</h2><p>http 出现之前，人们主要通过 email 和 ftp 的方式来上网交流。1980-1990 年间，http 和 gopher 等方案被提出，后来 http 以其易用性胜出。1990 年，Tim Berners-Lee（李爵士）发明了 www，主要包括三个概念：<strong>URI,HTTP 和 HTML</strong></p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>URI（uniform resource identity）通用资源标识符包括 URN（uniform resource name)和 URL(uniform resource location)。<br>通过 URN 可以确定唯一的资源，URL 可以确定唯一的地址。</p><h3 id="URL-的组成"><a href="#URL-的组成" class="headerlink" title="URL 的组成"></a>URL 的组成</h3><p>URL 通常由协议、主机、端口、路径、查询参数以及锚点等组成。<br><img src="/images/url.png" alt="url结构"><br><code>protocol :// hostname[:port] / path / [parameters][?query]#fragment</code><br><strong>协议</strong>：http，https，[ftp，mailto，ed2k，file:///]<br><strong>主机</strong>： `.com 一级域名（顶级域名） baidu.com 二级域名 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 三级域名<br><strong>端口</strong>：对应服务器端口。每个端口的分配功能不同。（默认端口 80）</p><table><thead><tr><th align="center">端口</th><th align="center">分配功能</th></tr></thead><tbody><tr><td align="center">21</td><td align="center">ftp</td></tr><tr><td align="center">53</td><td align="center">DNS</td></tr><tr><td align="center">80</td><td align="center"><strong>http</strong></td></tr><tr><td align="center">443</td><td align="center"><strong>https</strong></td></tr><tr><td align="center">1080</td><td align="center">代理端口</td></tr></tbody></table><p><strong>路径</strong>：以‘/’开头的路径，不同于文件系统的路径，它决定于后端的路由。<br><strong>查询参数</strong>：请求或查询的键值对<br><strong>锚点</strong>：这个部分不会发送给后端，它根据前端页面元素 id 值来跳转。</p><h3 id="DNS（domain-name-system-域名系统"><a href="#DNS（domain-name-system-域名系统" class="headerlink" title="DNS（domain name system)域名系统"></a>DNS（domain name system)域名系统</h3><p>我们访问网页，最终都是在访问域名对应<strong>IP 地址</strong>的服务器。浏览器中的域名会先在电脑中的<strong>HOST 文件</strong>(vi /etc/hosts)中寻找对应的 IP，如果找不到就会去电信公司的 DNS 系统中寻找。很多大公司会有多台服务器，这样同一个域名可能对应多个 IP，DNS 系统会根据就近原则返回给我们对应的服务器。<br>查询 ip：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nslookup &lt;域名&gt;</span><br><span class="line">ping &lt;域名&gt;</span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>互联网中包含客户端和服务器。我们在浏览器中上网实际上是：client 发送请求 →server 接受请求 →server 发送响应 →client 接收并下载响应。<br><strong>bash 访问 url:</strong> <code>curl [-X &lt;get/post/put/patch/delete&gt;] [-d &quot;12345&quot;] -s -v [-H &quot;a:b&quot;] -- &lt;url&gt;</code></p><h3 id="http-请求格式"><a href="#http-请求格式" class="headerlink" title="http 请求格式"></a>http 请求格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">part1 动词 路径 协议/版本</span><br><span class="line">part2 Key1: value1</span><br><span class="line">part2 Key2: value2</span><br><span class="line">part2 Key3: value3</span><br><span class="line">part2 Content-Type: application/x-www-form-urlencoded</span><br><span class="line">part2 Host: www.baidu.com</span><br><span class="line">part2 User-Agent: curl/7.54.0</span><br><span class="line">part3</span><br><span class="line">part4 要上传的数据</span><br></pre></td></tr></table></figure><ol><li>请求最多包含四部分，最少包含三部分。（第四部分可以为空）</li><li>第一部分请求动词包括 GET（获取/查询） POST(上传) PUT(整体更新) PATCH(局部更新) DELETE(删除) HEAD OPTIONS 等</li><li>第一部分的路径包括「查询参数」，但不包括「锚点」（注意区别于 url 路径）。如果你没有写路径，那么路径默认为 ‘/’</li><li>第二部分中的 Content-Type 标注了第 4 部分的格式，第二部分都是 key-values。</li><li>第三部分永远都是一个回车（\n）。</li><li>第四部分是要上传的数据，可以为空。如果上传的数据是汉字，那它会被解析为以“%”分隔的三字节的 unicode。</li></ol><p><img src="/images/request.png" alt="http请求示例"></p><h3 id="http-响应格式"><a href="#http-响应格式" class="headerlink" title="http 响应格式"></a>http 响应格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">part1 协议/版本号 状态码 状态解释</span><br><span class="line">part2 Key1: value1</span><br><span class="line">part2 Key2: value2</span><br><span class="line">part2 Content-Length: 17931</span><br><span class="line">part2 Content-Type: text/html</span><br><span class="line">part3</span><br><span class="line">part4 要下载的内容</span><br></pre></td></tr></table></figure><ol><li>第一部分的状态码是服务器对浏览器说的话。<br>1xx 不常用<br>2xx 表示请求成功 （200 成功 204 创建成功）<br>3xx（301 网页永久移走 302 网页暂时移走 304 响应内容与上次一样）<br>4xx 表示客户端请求出错,一般是 404<br>5xx 表示服务器出错</li><li>第二部分中的 Content-Type 标注了第 4 部分的格式，Content-Type 遵循 MIME 规范。</li><li>第三部分永远都是一个回车（\n）。</li><li>第四部分是要下载的数据。<br><img src="/images/response.png" alt="http响应示例"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git和github的使用</title>
      <link href="2020/03/05/git%E5%92%8Cgithub%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/03/05/git%E5%92%8Cgithub%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>git是一个代码版本管理工具，git可以创建本地和远程仓库，其中github就可以作为远程代码仓库。windows中要使用git需要安装git bash。</p><h3 id="git-bash"><a href="#git-bash" class="headerlink" title="git bash"></a>git bash</h3><p>git bash是一套linux虚拟环境，内置linux命令和git命令。它是比cmd更好用的命令行工具。<br>安装完成后首先全局设置好用户名，用户邮箱等属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">git config --global user.name xxx #设置username</span><br><span class="line">git config --global user.email xxx #设置邮箱</span><br><span class="line">git config --global push.default simple # </span><br><span class="line">git config --global core.quotepath false #防止文件名变成数字</span><br><span class="line">git config --global core.editor &quot;vim&quot; # 使用vim编辑提交信息</span><br></pre></td></tr></table></figure><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><ol><li><p>初始化仓库 git init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;path&gt;</span><br><span class="line">mkdir &lt;dirName&gt;</span><br><span class="line">cd &lt;dirName&gt;</span><br><span class="line">git init    #初始化仓库</span><br></pre></td></tr></table></figure></li><li><p>git add [-A /-u/./<path>]<br>添加文件或者文件夹到本地仓库暂存区（有些地方也称为索引库）。</path></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;path&gt;  添加指定的文件和文件夹</span><br><span class="line">git add .       添加仓库中所有变动到暂存区，但**不包括删除的文件**</span><br><span class="line">git add -u      添加已经tracked的文件变动至暂存区，但不包括**新添加的文件**</span><br><span class="line">git add -A      添加所有文件和变动至暂存区</span><br></pre></td></tr></table></figure></li><li><p>git commit [&lt;-m description&gt;]<br>将暂存区的内容提交到本地仓库。如果不添加-m参数，那么会自动打开vim编辑器让我们输入commit描述。<br>vim编辑器通过<kbd>i</kbd>来切换编辑模式，编辑完成后通过<kbd>esc</kbd>来切换命令模式，并使用<kbd>:wq</kbd>保存退出或者使用<kbd>:q!</kbd>不保存直接退出。</p></li></ol><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><ol><li><p>远程仓库创建：直接在github上create repository</p></li><li><p>关联远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:XXX/YY.git     # ssh关联</span><br><span class="line">git remote add origin https://github.com/XXX/YY.git     # https关联</span><br></pre></td></tr></table></figure></li><li><p>推送到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull    #当远程库被人为改变导致本地和远程仓库不一致，就需要git pull后再git push</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li></ol><h3 id="其他常用指令"><a href="#其他常用指令" class="headerlink" title="其他常用指令"></a>其他常用指令</h3><p>git status &lt;-sb&gt; 查看git状态(显示总结和分支)<br>git log 查看提交记录<br>git clone &lt;地址&gt;  克隆代码<br>git remote set-url origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:xxxxx.git 重新设置远程地址<br>git branch 新建分支<br>git merge 合并分支<br>git stash 保存当前进度但不提交，然后可以切换到其他分支<br>git checkout 切换分支<br>git stash pop 读取之前保存的未提交记录<br>git revert 撤销某次提交<br>git reset 回退到撤销点<br>git diff 查看详细变化</p><h3 id="几个文件的作用"><a href="#几个文件的作用" class="headerlink" title="几个文件的作用"></a>几个文件的作用</h3><p>.gitignore 忽略提交的文件或者文件夹<br>README.md  文档的描述<br>LISENCE 开源协议许可证</p><h3 id="新的github账号"><a href="#新的github账号" class="headerlink" title="新的github账号"></a>新的github账号</h3><p>首次创建github账号或者需要github支持多台设备时，就需要用到SSH绑定。</p><h4 id="SSH-key的获取"><a href="#SSH-key的获取" class="headerlink" title="SSH key的获取"></a>SSH key的获取</h4><p>windows系统中, 通常”~/“代表绝对路径”/c/Users/Administrator”（或者说当前用户user的绝对位置）。在”~/.ssh/“ 中有两个文件，id_rsa相当于钥匙，id_rsa.pub相当于锁。我们只需要复制id_rsa.pub到github的SSH key中即可。<br>可以通过以下命令来获取新的SSH key：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> rm -rf ~/.ssh/*    #删除原来的key</span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;你的邮箱&quot;    # 连按三次enter，生成新的key</span><br></pre></td></tr></table></figure><p>与github绑定后，通过<code>ssh -T git@github.com</code>来验证是否绑定成功。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工欲善其事必先利其器</title>
      <link href="2020/03/02/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/"/>
      <url>2020/03/02/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>今天把在前端开发中常用到的工具汇总一下，并附上下载和使用说明地址以供日后查阅。</p><table><thead><tr><th align="center">软件名称</th><th align="center">用途</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">ld</td><td align="center">fq(愉快的上网)</td><td align="center"><a href="https://getlantern.org/zh_CN/index.html" target="_blank" rel="noopener">地址</a></td></tr><tr><td align="center">colorpix</td><td align="center">取色器</td><td align="center"><a href="https://colorpix.en.softonic.com/" target="_blank" rel="noopener">地址</a></td></tr><tr><td align="center">VSCode</td><td align="center">代码编辑器</td><td align="center"><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">地址</a></td></tr><tr><td align="center">sublime3</td><td align="center">代码编辑器</td><td align="center"><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">地址</a></td></tr><tr><td align="center">Node.js/npm</td><td align="center">node环境</td><td align="center"><a href="https://nodejs.org/en/" target="_blank" rel="noopener">地址</a></td></tr><tr><td align="center">git</td><td align="center">代码管理工具</td><td align="center"><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">地址</a></td></tr></tbody></table><p>上面这些软件都打包到百度云备份。</p><h2 id="ld"><a href="#ld" class="headerlink" title="ld"></a>ld</h2><p>ld免费版有流量限制，<a href="https://github.com/YoulianBoshi/lantern-vpn" target="_blank" rel="noopener">破j方法在此</a>，破j后可以无视流量。也可手动更改mac地址，win7 mac地址第二位必须是2,6,A,E中的一个，一般以2A开头才有效（切记备份初始mac）。</p><h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><p>node.js安装完成后，在CMD或者Git Bash中使用。<br>node.js安装后自带npm。npm是包管理工具，常见用法可见<a href="/2019/10/30/npm常用的命令">自己总结的文章</a>。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>npm 的配置被存储在 ~/.npmrc。打开 Git Bash，依次输入以下命令，按回车：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org/</span><br><span class="line">npm config set loglevel http</span><br><span class="line">npm config set progress false</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>进入：在git bash中输入node，回车，就可以进入 node 运行环境，此时就可以写 JS 了。<br>退出：ctrl+D 退出           ctrl+C 中断</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p>git bash是一套linux虚拟环境，内置linux命令和git命令。它是比cmd更好用的命令行工具。<br>git bash安装后也需要配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name xxx #设置username</span><br><span class="line">git config --global user.email xxx #设置邮箱</span><br><span class="line">git config --global push.default simple # </span><br><span class="line">git config --global core.quotepath false #防止文件名变成数字</span><br><span class="line">git config --global core.editor &quot;vim&quot; # 使用vim编辑提交信息</span><br></pre></td></tr></table></figure><h3 id="git小白专用命令："><a href="#git小白专用命令：" class="headerlink" title="git小白专用命令："></a>git小白专用命令：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add</span><br><span class="line">git commit</span><br><span class="line">git pull</span><br><span class="line">git push (origin master)</span><br><span class="line">git clone</span><br><span class="line">git status [-sb]</span><br></pre></td></tr></table></figure><p>关于git的使用方法请移步：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的Git教程</a></p><h2 id="git-bash命令行"><a href="#git-bash命令行" class="headerlink" title="git bash命令行"></a>git bash命令行</h2><p>以’/‘开头的路径就是绝对路径，它是文件的完整路径。<br>不以’/‘开头的路径就是相对路径。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol><li>cd ~/desktop   #改变文件夹</li><li>mkdir [directory] #添加文件夹</li><li>touch [filename]/ echo [content] &gt; [filename] #添加文件</li><li>vi [filename] 使用vim编辑文件</li><li>open/start [filename] 打开/执行文件</li><li>mv [filename1] [filename2] 移动或重命名文件</li><li>cp [filename1] [path] 复制文件</li><li>rm [-rf] [filename] 删除文件或者文件夹</li><li>ls -l  显示文件详细信息</li><li>chmod +x [filename] 使文件可执行</li></ol><h3 id="bashrc文件"><a href="#bashrc文件" class="headerlink" title="~/.bashrc文件"></a>~/.bashrc文件</h3><ol><li><p>git bash 启动时会优先自动.bashrc文件中命令，所以可以自定义一些自启动命令。</p></li><li><p>bashrc文件中可以起别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias la=&apos;ls -a&apos;</span><br></pre></td></tr></table></figure></li><li><p>可以设置一些环境变量和系统PATH值<br>在bash中，可执行的文件就是命令，如sh，cp，mkdir,mv等，不可执行的文件就是配置。</p></li><li><p>可以直接使用[demo.sh]来执行命令，此时必须将demo.sh的pwd添加到$PATH中。</p></li><li><p>使用[sh demo.sh]执行命令，bash会在当前目录中查找文件，未查到目标就在$PATH中查找。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export SASS_BINARY_SITE=&quot;https://npm.taobao.org/mirrors/node-sass&quot;</span><br><span class="line">export PATH=&quot;目录的绝对路径:$PATH&quot;  # 添加绝对路径到系统PATH中</span><br></pre></td></tr></table></figure><p>2个好用的命令行网站：</p><ol><li><a href="https://explainshell.com/" target="_blank" rel="noopener">explainshell</a></li><li><a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">tldr</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v-if和v-show</title>
      <link href="2020/02/27/v-if%E5%92%8Cv-show/"/>
      <url>2020/02/27/v-if%E5%92%8Cv-show/</url>
      
        <content type="html"><![CDATA[<h2 id="v-if和v-show的区别"><a href="#v-if和v-show的区别" class="headerlink" title="v-if和v-show的区别"></a>v-if和v-show的区别</h2><ol><li>v-if显示隐藏是将dom元素整个添加或删除，而v-show隐藏则是为该元素添加display:none，dom元素还在。</li><li>性能消耗：v-if有更高的切换消耗；v-show有更高的初始渲染消耗。</li><li>编译条件：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译（编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载); v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素保留。</li></ol><h2 id="display-none和visiblity-hidden的区别"><a href="#display-none和visiblity-hidden的区别" class="headerlink" title="display:none和visiblity:hidden的区别"></a>display:none和visiblity:hidden的区别</h2><ol><li>display:none 不占页面空间，元素不占页面空间后，该元素和其内部元素的宽高值永远是0。visiblity:hidden占据原先页面空间。如果想隐藏又想取到宽高值，那就得用visiblity:hidden。</li><li>display:none 的子元素也一定无法显示，visiblity:hidden的子元素可以设置显示。display:none元素及其子元素都将隐藏，而visiblity:hidden元素的子元素却可以设置visibility: visible 显示出来。在这一点上，如果页面是比较复杂或者是不受控制的，就要慎重使用visiblity:hidden，因为保不齐哪个元素被设置成可见，影响显示效果。</li><li>display:none 引起页面重绘和回流， visiblity:hidden只引起页面重绘。visiblity:hidden看起来的性能比display:none好些在两者都能使用情况下，可先考虑visiblity:hidden。</li></ol>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v-if </tag>
            
            <tag> v-show </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>position定位小结</title>
      <link href="2020/02/23/position%E5%AE%9A%E4%BD%8D%E5%B0%8F%E7%BB%93/"/>
      <url>2020/02/23/position%E5%AE%9A%E4%BD%8D%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><p>position属性的值有static(默认值)，relative，absolute，fixed。</p><h3 id="static"><a href="#static" class="headerlink" title="static:"></a>static:</h3><p>所有元素默认值。即没有定位，元素仍出现在正常文本流中。<br>特性：</p><ol><li><strong><em>忽略 top, bottom, left, right或者z-index声明</em></strong>。</li></ol><h3 id="relative"><a href="#relative" class="headerlink" title="relative:"></a>relative:</h3><p>相对定位元素会<strong>相对于它自己在正常流中的默认位置</strong>偏移。<br>特性：</p><ol><li>相对于自己偏移，但原来所占的位置将继续占有，没有脱离标准文档流，<strong>可设置z-index属性</strong>。</li><li>每次移动是以自己的左上角为基点移动。</li></ol><h3 id="absolute"><a href="#absolute" class="headerlink" title="absolute:"></a>absolute:</h3><p>生成绝对定位的元素。<strong>相对于static定位以外</strong>的第一个父元素进行定位。脱离正常文档流，<strong>可设置z-index属性</strong>实现层叠。<br>特性：</p><ol><li>绝对定位偏移基准点是父元素的<strong>padding-box左上角</strong>，即absolute元素的margin-box相对于父元素的padding-box偏移。</li><li>没有设置定位值(left,right,top,bottom)的元素，仍处在原本在标准流中的位置。但是它已经脱离了文本流，不会影响兄弟元素的布局。</li><li>绝对定位元素的宽高百分比是相对于其最近的父级别定位元素的padding-box的大小来计算的。</li><li>定位值（left,right,top,bottom）的百分比也是相对于父元素的padding-box宽高来计算的。</li><li>当left，right，top，bottom无法同时满足时，优先满足left和top。</li></ol><h3 id="fixed"><a href="#fixed" class="headerlink" title="fixed:"></a>fixed:</h3><p>固定定位。一般<strong>相对于浏览器窗口</strong>进行定位，脱离正常文档流，可以设置z-index。<br>特性：</p><ol><li>固定定位相邻父元素出现transform和perspective属性，那么此时固定元素相对于父元素定位而不是浏览器窗口。</li><li>fixed固定定位对于IE6,7,8不兼容。</li><li>fixed固定定位元素的宽高百分比是相对于浏览器窗口（body的border-box）来计算的。</li><li>固定定位偏移基准点是视口的左上角，即fixed元素的margin-box相对于body的border-box偏移。</li></ol><p>任何元素都可以定位。不过<strong><em>绝对或固定定位会生成一个BFC</em></strong>。</p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><ol><li><p>触发 BFC<br>BFC可看成XY方向上标准流布局图层，只要元素满足下面任一条件即可触发 BFC 特性：</p><ol><li>body 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position: (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ol></li><li><p>z-index（默认值auto）</p><ol><li>只有position为relative/absolute/fixed时（除了static）,Z-index才生效。</li><li>z-index:0和z-index:auto层叠水平一样。但是z-index:auto不会产生层叠上下文，而z-index:0(或者数值)都会产生新的层叠上下文。</li><li>同一层叠上下文，z-index越大层叠水平越高，层叠水平相同后来居上。</li><li>不同层叠上下文比较，要比较其父元素层叠水平。</li></ol></li><li><p>层叠顺序和层叠上下文</p><ol><li>七层层叠顺序<br><img src="/images/123.png" alt="七层层叠顺序"></li><li>层叠上下文<br>层叠上下文可看成Z方向上布局图层。元素满足下面任一条件即可产生新的层叠上下文：<ol><li>html根元素 。</li><li>position值为 absolute|relative，且 z-index值不为 auto。</li><li>position 值为 fixed|sticky。</li><li>z-index 值不为 auto 的flex元素，即：父元素 display:flex|inline-flex。</li><li>opacity 属性值小于 1 的元素。</li><li>transform 属性值不为 none的元素。</li><li>mix-blend-mode 属性值不为 normal 的元素。</li><li>filter、 perspective、 clip-path、 mask、 mask-image、 mask-border、 motion-path值不为none的元素 。</li><li>perspective 值不为 none 的元素。</li><li>isolation 属性被设置为 isolate 的元素 。</li><li>will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值。</li><li>-webkit-overflow-scrolling 属性被设置 touch的元素。<br>。</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> position </tag>
            
            <tag> z-index </tag>
            
            <tag> absolute </tag>
            
            <tag> BFC </tag>
            
            <tag> 层叠上下文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>inline、inline-block和block元素的区别</title>
      <link href="2020/02/23/inline%E5%92%8Cinline-block%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2020/02/23/inline%E5%92%8Cinline-block%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>常见的元素有block块元素,inline内联元素和inline-block元素。</p><h2 id="block元素特点"><a href="#block元素特点" class="headerlink" title="block元素特点"></a>block元素特点</h2><ol><li>宽度默认auto,<strong>block元素width:auto时，宽度会尽可能宽。</strong>（默认填满父元素）,单个block元素独占一行，<strong>即使宽度设为0px</strong>。</li><li>宽度和高度可以设置。</li><li>padding、margin、border都可以设置。</li><li>内部可以嵌套block、inline和inline-block等各种元素。</li></ol><h2 id="inline元素的特点"><a href="#inline元素的特点" class="headerlink" title="inline元素的特点"></a>inline元素的特点</h2><ol><li>不会独占一行，多个inline元素可以占据同一行，直到宽度超过父元素才会另一行。</li><li>宽度和高度不可以设置，默认为auto，由内容宽高决定，具有包裹性。</li><li><strong>padding、margin和border在水平方向上可以设置，垂直方向上（padding-top|padding-bottom|margin-top |margin-bottom|border-top|border-bottom）设置无效</strong>。border-top和border-bottom即使在视觉上有效果，但实际上布局上不起作用。 </li><li>inline元素内部理论上不可以嵌套block元素</li></ol><iframe src="/pages/demo4" width="100%" height="400px" frameborder="0" allowfullscreen></iframe><h2 id="inline-block元素特点"><a href="#inline-block元素特点" class="headerlink" title="inline-block元素特点"></a>inline-block元素特点</h2><p>inline-block同时具备inline和block元素的特点。</p><ol><li>不独占一行</li><li>宽高可以设置，当宽高设为auto时又具备包裹性</li><li>padding、margin、border都可以设置</li><li>内部理论上不可以嵌套block元素</li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>inline和inline-block元素<strong>第三条</strong>特点的差别很容易让人忽略。</li><li>inline元素由于内容而自动换行后，会导致border破裂。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>width百分比小结</title>
      <link href="2020/02/22/width%E7%99%BE%E5%88%86%E6%AF%94%E5%B0%8F%E7%BB%93/"/>
      <url>2020/02/22/width%E7%99%BE%E5%88%86%E6%AF%94%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>width:100%中百分比肯定是相对于父元素而言的，但是由于padding，box-sizing等属性的影响，有时候会迷惑我们。所以今天对这个问题总结一下。</p><h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h2><p>box-sixing属性主要有content-box和border-box两个值，默认是content-box。这个属性直接影响元素本身的width值，间接影响子元素width值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">box-sizing: content-box    //当前元素width值只包括content宽度</span><br><span class="line">box-sizing: border-box    //当前元素width值包括content,padding以及border的值</span><br></pre></td></tr></table></figure><h2 id="width-100-的元素是绝对定位"><a href="#width-100-的元素是绝对定位" class="headerlink" title="width:100%的元素是绝对定位"></a>width:100%的元素是绝对定位</h2><ol><li>absolute绝对定位元素的父元素是非static定位元素。它的width:100%取值等于父元素的content值加上padding值(与border-width无关)。</li><li>fixed固定定位元素的父元素是body（即浏览器窗口）。它是特殊的绝对定位，fixed固定定位元素的width:100%取值等于父元素（body）的content值和padding值以及border值之和。(与border-width有关)。<br>总的来说，<strong>fixed固定定位元素的width:100%等于浏览器窗口的width。</strong></li></ol><h2 id="width-100-的元素是非绝对定位"><a href="#width-100-的元素是非绝对定位" class="headerlink" title="width:100%的元素是非绝对定位"></a>width:100%的元素是非绝对定位</h2><p>非绝对定位元素width:100%的取值等于父元素的content值。包括position:relative相对定位元素也符合这一规则。</p><p><strong>浏览器url中出现“：”容易报错，所以width：100%不允许出现在标题中。</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>width百分比的计算要注意两点：</p><ol><li>找准父元素。<ol><li>普通文本流和relative相对定位元素以及static定位元素的父元素都是普通的父元素。</li><li>absolute绝对定位元素的父元素是离它最近的<strong><em>非static定位元素</em></strong>。</li><li>fixed固定定位元素的父元素是浏览器窗口（近似于body)。</li></ol></li><li>找准width计算规则<ol><li>absolute绝对定位元素的width:100%取值等于父元素的content值加上padding值(与border-width无关)。</li><li>fixed固定定位元素的width:100%等于浏览器窗口的width。</li><li>除此之外所有元素的width:100%等于父元素的content值。<br>上面两点可以确定好width值，然后元素本身会根据box-sizing属性来分配content，border以及padding。（margin-box浏览器支持有限）。</li></ol></li></ol><p>width auto的小结</p><ol><li>block元素的width:auto会使widh尽可能大直至撑满父元素，inline-block元素width:auto会使width尽可能小直至包裹内容。</li></ol><p>padding和margin百分比小结</p><ol><li>非绝对定位元素padding和margin百分比（包括padding-top    ，pading-bottom，margIn-top，margin-bottom）相对于父元素content-box的width值计算的。</li><li>绝对定位元素padding和margin百分比（包括padding-top，pading-bottom，margIn-top，margin-bottom）相对于最近非static定位父元素padding-box的width值计算的。</li></ol><p>border-width不能设置百分比</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> width </tag>
            
            <tag> 百分比 </tag>
            
            <tag> auto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中computed属性的理解</title>
      <link href="2019/11/02/vue%E4%B8%ADcomputed%E5%B1%9E%E6%80%A7%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>2019/11/02/vue%E4%B8%ADcomputed%E5%B1%9E%E6%80%A7%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>computed是vue中一个重要的属性-<strong>计算属性</strong>。</p><h2 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    test:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.param;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶用法："><a href="#进阶用法：" class="headerlink" title="进阶用法："></a>进阶用法：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">    test:&#123;</span><br><span class="line">        <span class="keyword">get</span>()&#123;              <span class="comment">//getter</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.param;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>(val)&#123;           <span class="comment">//setter</span></span><br><span class="line">            <span class="keyword">this</span>.param = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##我的理解：<br>computed计算属性是在beforeCreate之后，created<br>之前这个时间段内<strong><em>初始化</em></strong>的。当前<strong><em>依赖的初始值</em></strong>决定了计算属性的的初始值。同时计算属性的结果会被缓存，除非之后依赖的响应式属性变化才会重新计算。注意，如果某个依赖 (比如非响应式属性)<br>在该实例范畴之外，则计算属性是不会被更新的。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm常用的命令</title>
      <link href="2019/10/30/npm%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
      <url>2019/10/30/npm%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>最近常用到一些npm的命令，今天总结一下，方便以后查阅。<br>使用npm，需要提前安装<strong>node.js</strong>。</p><h3 id="查询npm和node-js版本"><a href="#查询npm和node-js版本" class="headerlink" title="查询npm和node.js版本"></a>查询npm和node.js版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><h3 id="列出npm所有的命令用法"><a href="#列出npm所有的命令用法" class="headerlink" title="列出npm所有的命令用法"></a>列出npm所有的命令用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -l</span><br><span class="line">npm &lt;command&gt; -h    //某条指令的详细说明</span><br></pre></td></tr></table></figure><h3 id="安装npm包"><a href="#安装npm包" class="headerlink" title="安装npm包"></a>安装npm包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i &lt;package name&gt; [ -g,-S,--save-dev]</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org   //安装国内淘宝镜像</span><br></pre></td></tr></table></figure><h3 id="卸载npm包"><a href="#卸载npm包" class="headerlink" title="卸载npm包"></a>卸载npm包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm un &lt;package name&gt; [ -g,-S,--save-dev]</span><br></pre></td></tr></table></figure><h3 id="升级npm包"><a href="#升级npm包" class="headerlink" title="升级npm包"></a>升级npm包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm up &lt;package name&gt; [ -g,-S,--save-dev]</span><br></pre></td></tr></table></figure><h3 id="查看本地已安装的包"><a href="#查看本地已安装的包" class="headerlink" title="查看本地已安装的包"></a>查看本地已安装的包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls [-g]</span><br></pre></td></tr></table></figure><h3 id="查看某个包在npm服务器上的版本信息"><a href="#查看某个包在npm服务器上的版本信息" class="headerlink" title="查看某个包在npm服务器上的版本信息"></a>查看某个包在npm服务器上的版本信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm info &lt;package name&gt;     //查看包在npm服务器上最新版本的详细信息 </span><br><span class="line">npm view &lt;package name&gt; versions    //查看包在npm服务器上的所有版本号（仅显示版本号） </span><br><span class="line">npm view &lt;package name&gt; version    //查看包在npm服务器上的最新版本号（仅显示版本号）</span><br></pre></td></tr></table></figure><h3 id="清空npm本地缓存"><a href="#清空npm本地缓存" class="headerlink" title="清空npm本地缓存"></a>清空npm本地缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm cache clear      //当使用相同版本号发布新版本代码时，更新前需执行此命令</span><br></pre></td></tr></table></figure><h3 id="设置淘宝镜像"><a href="#设置淘宝镜像" class="headerlink" title="设置淘宝镜像"></a>设置淘宝镜像</h3><p><code>npm config set registry https://registry.npm.taobao.org</code></p><h3 id="设置官方源"><a href="#设置官方源" class="headerlink" title="设置官方源"></a>设置官方源</h3><p><code>npm config set registry https://www.npmjs.org</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>host文件的作用和用法</title>
      <link href="2019/10/26/host%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E7%94%A8%E6%B3%95/"/>
      <url>2019/10/26/host%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8%E5%92%8C%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Hosts-文件的工作方式"><a href="#Hosts-文件的工作方式" class="headerlink" title="Hosts 文件的工作方式"></a>Hosts 文件的工作方式</h2><p>Window 系统中有个 Hosts 文件（没有后缀名）。<br>我们访问网站时，首先要通过<strong>DNS 服务器</strong>把要访问的网络域名（XXX.com）解析成 IP 地址后，计算机才能对这个网络域名进行访问。如果对于每个域名请求我们都要等待 DNS 服务器解析并返回 IP<br>信息，这样访问的效率就会降低。为了提高对经常访问的网络域名的解析效率，可以通过利用 Hosts 文件中建立域名和 IP 的映射关系来达到目的。<br>根据 Windows 系统规定，在进行 DNS 请求以前，Windows 系统会先检查自己的 Hosts 文件中是否有这个网络域名映射关系。如果有则，调用这个 IP 地址映射，如果没有，再向已知的 DNS 服务器提出域名解析。也就是说<strong><em>Hosts 的请求级别比 DNS 高</em></strong>。</p><hr><h2 id="Hosts-文件的语法"><a href="#Hosts-文件的语法" class="headerlink" title="Hosts 文件的语法"></a>Hosts 文件的语法</h2><p>Host 规定每段只能包括一个映射关系，也就是一个 IP 地址和一个与之有映射关系的主机名。<br>IP 地址要放在每段的最前面，映射的 Host name(主机名)在 IP 后面，中间用空格分隔。注释可以以“#”分割后的文字来说明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grammar:</span><br><span class="line">       ip host-name</span><br><span class="line">127.0.0.1 localhost</span><br></pre></td></tr></table></figure><hr><h2 id="Hosts-文件的用法"><a href="#Hosts-文件的用法" class="headerlink" title="Hosts 文件的用法"></a>Hosts 文件的用法</h2><ol><li><p>加快域名解析<br>对于要经常访问的网站，我们可以在 Hosts 中配置域名和 IP 的映射关系，提高域名解析速度。由于有了映射关系，当我们输入域名计算机就能很快解析出 IP，而不用请求网络上的 DNS 服务器。</p></li><li><p>方便局域网用户<br>在很多单位的局域网中，会有服务器提供给用户使用。局域网中一般很少架设 DNS 服务器，访问这些服务器时，要输入难记的 IP 地址。这对不少人来说相当麻烦。现在可以分别给这些服务器取个容易记住的名字，然后在 Hosts 中建立 IP 映射，这样以后访问的时候，只要输入这个服务器的名字就行了。</p></li><li><p>屏蔽网站<br>现在有很多恶意网站。对于这些网站我们可以利用 Hosts 把该网站的域名映射到错误的 IP 或本地计算机的 IP，这样就可以达到屏蔽的目的。在 WINDOWS 系统中，约定 127.0.0.1 为本地计算机的 IP 地址, 0.0.0.0 是错误的 IP 地址。<br>例如下面的代码：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1  # 要屏蔽的网站A</span><br><span class="line">0.0.0.0  # 要屏蔽的网站B</span><br></pre></td></tr></table></figure><ol start="4"><li>顺利连接系统<br>对于 Lotus 的服务器和一些数据库服务器，在访问时如果直接输入 IP 地址是不能访问的，只能输入服务器名才能访问。如果我们配置好 Hosts 文件，这样输入服务器名就能顺利连接了。</li></ol><hr><h2 id="Apache-中-vhost-的作用"><a href="#Apache-中-vhost-的作用" class="headerlink" title="Apache 中 vhost 的作用"></a>Apache 中 vhost 的作用</h2><p>vhost 允许在同一个服务器中（或者计算机、主机）配置多个域名和端口。方法如下：</p><ol><li>在 apache 配置文件 httpd.conf 中，新增端口 5000：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#Listen 12.34.56.78:80</span><br><span class="line">Listen 80</span><br><span class="line">Listen 5000</span><br></pre></td></tr></table></figure><ol start="2"><li>在 D:\xampp\apache\conf\extra\httpd-vhosts.conf 中，新增端口解析：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:5000&gt;</span><br><span class="line">    ServerAdmin webmaster@tp5.com</span><br><span class="line">    DocumentRoot &quot;D:/XAMPP/htdocs/tp5/public&quot;</span><br><span class="line">    DocumentRoot &quot;D:/XAMPP/htdocs/tp5/public&quot;</span><br><span class="line">    ServerName tp5.com</span><br><span class="line">    ErrorLog &quot;D:/XAMPP/htdocs/tp5/public/access.log&quot;</span><br><span class="line">    CustomLog &quot;D:/XAMPP/htdocs/tp5/public/access.log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><h3 id="vhost-配置语法"><a href="#vhost-配置语法" class="headerlink" title="vhost 配置语法"></a>vhost 配置语法</h3><ol><li>&lt;VirtualHost [ip:端口]&gt; 指定虚拟主机所使用的 IP 地址，端口或域名（如果 web 服务器上有多个 IP，就可以制定某个 IP 的某个端口是哪个主机）</li><li>ServerAdmin 管理员邮箱（Apache 本地服务器中一般设成 webmaster@[绑定的域名]）</li><li>DocumentRoot 网站根目录（地址两端加引号,必填）</li><li>ServerName 绑定的域名 （必填）</li><li>ServerAlias 要绑定的虚拟主机的别名。（选填，如有多个域名，中间以空格分隔。支持*，?两种通配符，比如 *.abc.com，表示任意一个 abc.com 的二级域名都可访问。）</li><li>ErrorLog 错误日志目录 （选填）</li><li>CustomLog 用户日志目录 （选填）<br><strong><em>Apache 在接受到请求时,如果没有匹配到对应的 ip 端口和绑定域名，就会默认第一个 VirtualHost 起作用。</em></strong></li></ol><hr><h2 id="host-和-vhost-的区别"><a href="#host-和-vhost-的区别" class="headerlink" title="host 和 vhost 的区别"></a>host 和 vhost 的区别</h2><p>如图：<br><img src="/images/host1.png" alt="简单流程图"></p><p>host 是本地计算机中<strong><em>通过请求域名来解析 ip</em></strong>的文件，vhost 是 web 服务器中通过域名和 ip 端口来确<strong><em>定 web 服务器分发内容的目录</em></strong>的文件。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> host </tag>
            
            <tag> Apache </tag>
            
            <tag> vHost </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise的理解</title>
      <link href="2019/10/25/Promise%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>2019/10/25/Promise%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promise对象是解决异步问题的一种方法。它的基本用法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    ...(<span class="keyword">async</span> code)         <span class="comment">//一段异步代码     pending状态</span></span><br><span class="line">    <span class="keyword">if</span>(succeed)&#123;            <span class="comment">//fulfilled状态</span></span><br><span class="line">        resolve();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;                  <span class="comment">//rejected 状态</span></span><br><span class="line">        reject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">promise.then(resolve,reject).then(...)</span><br></pre></td></tr></table></figure><p>它有以下特点：</p><ol><li>new promise参数中的函数会立即执行，等同于同步代码。</li><li>promise对象的状态不受外界影响，而且状态一旦改变就不会再变。它有三种状态：pending（进行中），fulfilled（已成功），rejected（已失败）。在new promise中执行resolve()时，状态由pennding变成fulfilled，执行reject()时，状态会由pending变成rejected.</li><li>当promise状态改变就会触发then()中的回调函数，这个回调函数属于microTask。优先级高于macroTask但低于同步代码。</li></ol><!-- ## Promise常用api -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo的使用</title>
      <link href="2019/10/24/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2019/10/24/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>hexo是一个基于node.js的博客框架。安装hexo，需要提前安装下列application:</p><ol><li>node.js(version不低于8.6，建议使用10.0+版本)； </li><li>git （用于部署博客至线上）</li></ol><p>上述应用安装完成后，便可以通过npm安装hexo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><h3 id="1-hexo-init"><a href="#1-hexo-init" class="headerlink" title="1. hexo init "></a>1. hexo init <new folder></new></h3><p>在指定的<new folder>文件夹中新建一个hexo项目。如果省略<new folder>，便会在当前文件夹先建一个项目。<br>“hexo init”常常搭配下面的代码来初始化项目：</new></new></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure> <h3 id="2-hexo-new-layout"><a href="#2-hexo-new-layout" class="headerlink" title="2. hexo new layout"></a>2. hexo new <a href="title">layout</a></h3><p>这个命令可以新建一个[post,page,draft]。title是文件名。<br><strong>新建的draft草稿不会被渲染，用于存储未完成的文章。</strong>当需要将草稿变成文章时，可以手动将.md直接移动到_posts文件夹中，也可以使用“hexo publish <a href="文件名(不带.md)">type</a>”指令。手动将.md移动到_drafts文件夹可以使文章变成草稿。</p><h3 id="3-hexo-genetate"><a href="#3-hexo-genetate" class="headerlink" title="3. hexo genetate"></a>3. hexo genetate</h3><p>将markdown文本生成静态文件,可简写为hexo g 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d       //生成静态文件后立即部署</span><br><span class="line">hexo g -f       //清空public文件夹，重新生成静态文件</span><br></pre></td></tr></table></figure><h3 id="4-hexo-server"><a href="#4-hexo-server" class="headerlink" title="4. hexo server"></a>4. hexo server</h3><p>启动服务器,可简写为 hexo s 。可以通过<a href="http://localhost:4000/访问。" target="_blank" rel="noopener">http://localhost:4000/访问。</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p   //重设服务器端口</span><br><span class="line">hexo s -s   //只使用静态文件</span><br></pre></td></tr></table></figure><h3 id="5-hexo-deploy"><a href="#5-hexo-deploy" class="headerlink" title="5. hexo deploy"></a>5. hexo deploy</h3><p>部署博客网站，可简写为hexo d 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g   //先生成静态文件，再部署网站</span><br></pre></td></tr></table></figure><h3 id="6-hexo-clean"><a href="#6-hexo-clean" class="headerlink" title="6. hexo clean"></a>6. hexo clean</h3><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现对站点的更改无论如何也<strong>不生效</strong>，可能需要运行该命令。</p><h3 id="7-hexo-list"><a href="#7-hexo-list" class="headerlink" title="7. hexo list "></a>7. hexo list <type></type></h3><p>列出所有<type>类型的文件。type包括[post,page,draft,tag,category,route]。</type></p><h3 id="8-hexo-–debug"><a href="#8-hexo-–debug" class="headerlink" title="8. hexo –debug"></a>8. hexo –debug</h3><p>在终端中显示调试信息并记录到 debug.log。当碰到问题时，可以用调试模式重新执行一次，并提交调试信息到 GitHub。</p><p>在hexo中，source文件夹是放置几乎所有编辑文件的地方。在source文件夹中，如果有引入的第三方代码，例如：jquery，一定要加入到skip_render中。否则可能出现意想不到的错误。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue和vuec的安装和使用</title>
      <link href="2019/10/21/vue%E5%92%8Cvuec%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>2019/10/21/vue%E5%92%8Cvuec%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="安装vue"><a href="#安装vue" class="headerlink" title="安装vue"></a>安装vue</h2><p>这段时间，我在学习vue的使用。安装vue有三种方式：</p><ol><li><p>CDN方式：直接使用 <code>&lt;script&gt;</code> 标签引用vue；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  //引用最新版本vue</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.0"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>        //引用具体版本vue</span><br></pre></td></tr></table></figure> </li><li><p>npm安装：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue  <span class="comment">//安装最新稳定版</span></span><br><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org //可以安装npm淘宝镜像，提高安装速度 </span></span><br></pre></td></tr></table></figure></li><li><p>安装vue-cli构建工具：<br>a. 卸载旧版本vuec</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall vue-cli -g  <span class="comment">//vuec 2.0前称作vue-cli, 3.0+后称作@vue/cli</span></span><br></pre></td></tr></table></figure><p>b. 安装新版本vuec</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vue/cli -g </span><br></pre></td></tr></table></figure>   <br></li></ol><hr><h2 id="vuec使用"><a href="#vuec使用" class="headerlink" title="vuec使用"></a>vuec使用</h2><ol><li><p>新建vue项目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    vue create project_name</span><br><span class="line"><span class="comment">//  or </span></span><br><span class="line"><span class="comment">//  vue ui     进入vue gui管理界面</span></span><br></pre></td></tr></table></figure><p>项目名称不能出现<strong>大写字母或者驼峰形式</strong>。</p></li><li><p>进入安装目录，并运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd project_name</span><br><span class="line">npm install</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure> <br></li></ol><hr><h2 id="element-ui的安装及使用"><a href="#element-ui的安装及使用" class="headerlink" title="element-ui的安装及使用"></a>element-ui的安装及使用</h2><ol><li><p>npm安装使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure><p>在vuec创建项目中的main.js文件中写入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);       </span><br></pre></td></tr></table></figure></li><li><p>CDN引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>安装vue-cli-plugin-element<br>这个方法要求@vue/cli 3.0+ 。安装的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue create &lt;my-app&gt;</span><br><span class="line">cd &lt;my-app&gt;</span><br><span class="line">vue add element</span><br></pre></td></tr></table></figure>   <p>然后根据提示，插件会自动导入element-ui。</p></li></ol><hr><h2 id="axios的安装"><a href="#axios的安装" class="headerlink" title="axios的安装"></a>axios的安装</h2><ol><li>通用的安装方法：<br><code>npm install axios</code></li><li>vue-axios的安装和用法：<br><code>npm install --save axios vue-axios</code></li></ol><p><strong>在main.js中引入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import VueAxios from &apos;vue-axios&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure><p><strong>你可以这样使用它：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.axios.get(api).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">this.axios.get(api).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">this.$http.get(api).then((response) =&gt; &#123;</span><br><span class="line">  console.log(response.data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html中script标签引用多个js文件的执行问题</title>
      <link href="2019/10/14/html%E4%B8%ADscript%E5%BC%95%E7%94%A8%E5%A4%9A%E4%B8%AAjs%E6%96%87%E4%BB%B6%E7%9A%84%E6%89%A7%E8%A1%8C%E9%97%AE%E9%A2%98/"/>
      <url>2019/10/14/html%E4%B8%ADscript%E5%BC%95%E7%94%A8%E5%A4%9A%E4%B8%AAjs%E6%96%87%E4%BB%B6%E7%9A%84%E6%89%A7%E8%A1%8C%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><code>&lt;script&gt;</code>标签可以实现多个js文件的同步引用。如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"one.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"two.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"three.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><strong>js文件按顺序加载，执行</strong>；</li><li><strong>各个js文件中的全局变量和全局函数可以被其他js文件调用</strong>；</li><li><strong>较早执行的js文件不能调用较晚加载的js文件中的变量和函数。例如：”two.js”不能调用”three.js”中的变量和函数；</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> script标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git error cannot spawn ssh No such file or directory的一个解决办法</title>
      <link href="2019/10/14/Git%20error%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>2019/10/14/Git%20error%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>今天在hexo中，部署博客到github上时出现一个错误：<br> <strong>Git error</strong> cannot spawn ssh No such file or directory </p><p>这个错误最后发现是<strong>ssh</strong>没有加入到<strong>环境变量</strong>中，将<strong><code>&quot;D:\Git\usr\bin\ssh.exe&quot;</code></strong>加入到<strong>环境变量</strong>后，问题解决。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>background-size失效问题</title>
      <link href="2019/07/09/background-size%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
      <url>2019/07/09/background-size%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天写代码时遇到一个问题，发现background-size属性无效。代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon</span>&#123;</span><br><span class="line"><span class="attribute">background-size</span>:<span class="number">12px</span> <span class="number">12px</span>; </span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'assets/img/decrease_1@2x.png'</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>后来发现原因是，background是一个<em>组合属性</em>。它本身包含了background-size属性，默认值是auto。如果把background放在background-size后面，那么background-size会被覆盖为auto，这样就导致background-size设置失效。正确的写法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.icon</span>&#123;</span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'assets/img/decrease_1@2x.png'</span>);</span><br><span class="line"><span class="attribute">background-size</span>:<span class="number">12px</span> <span class="number">12px</span>; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>举一反三，以后遇到其他的<em>组合属性</em>一定要注意它出现的<em>位置</em>。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> background </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目中遇到的问题</title>
      <link href="2019/07/02/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2019/07/02/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="利用v-if来避免异步调用json数据延迟报错；"><a href="#利用v-if来避免异步调用json数据延迟报错；" class="headerlink" title="利用v-if来避免异步调用json数据延迟报错；"></a>利用v-if来避免异步调用json数据延迟报错；</h3><p><strong><em>代码如下：</em></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'header'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"support"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">              &#123;&#123;seller.supports[0].description&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>seller</em>是在vue生命周期函数create()异步获取的，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">created:<span class="function"><span class="keyword">function</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.$http.get(<span class="string">'/api/seller'</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = response.body;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">    <span class="keyword">if</span>(res.errno === ERR_OK)&#123;</span><br><span class="line">      <span class="keyword">this</span>.seller = res.data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果网络有延迟，当dom开始渲染时，seller还没有返回数据，浏览器就会报错。如下图所示：<br><img src="/images/Snipaste1.png" alt="浏览器报错"></p><p><strong><em>解决办法：</em></strong><br>通过添加v-if来限定dom渲染的时机。添加后代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'header'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"support"</span> <span class="attr">v-if</span>=<span class="string">'seller.supports'</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">              &#123;&#123;seller.supports[0].description&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="在less中如何实现字符串拼接"><a href="#在less中如何实现字符串拼接" class="headerlink" title="在less中如何实现字符串拼接"></a>在less中如何实现字符串拼接</h3><h4 id="如何引入外部less文件（or-css文件"><a href="#如何引入外部less文件（or-css文件" class="headerlink" title="如何引入外部less文件（or css文件)"></a>如何引入外部less文件（or css文件)</h4><p>引入css文件一般有两种方法：<em>@import url()<em>和</em>link</em><br>@import url()中url可以直接省略,例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="less" scoped=""&gt;</span><br><span class="line"><span class="comment">/*one way*/</span></span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">'../index.less'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* the other way*/</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">"../index.less"</span>;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>但是，省略url时，@import后面路径必须用<em>双引号</em>，在vue component中，使用单引号可能导致引用css失败。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">scoped</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 在vue中这种方式可能导致引用css失败 --&gt;</span></span></span><br><span class="line"><span class="css"><span class="keyword">@import</span> <span class="string">'../index.less'</span>;  </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在less中如何实现字符串拼接-1"><a href="#在less中如何实现字符串拼接-1" class="headerlink" title="在less中如何实现字符串拼接"></a>在less中如何实现字符串拼接</h4><p>在less中，不可以类似js用‘+’表示字符串拼接。需要利用less中的变量的<em>可变插值</em>来拼接字符串；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg</span>(<span class="keyword">@url</span>)&#123;</span><br><span class="line">@bg_url:'~@/assets/img/@&#123;url&#125;@2x.png';</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这其中@{url}就是可变插值的用法。less变量的可变插值可以用在<em>选择器名称，属性名称，URL和@import语句</em>这些地方。</p><h4 id="error-vuerc-may-be-outdated-Please-delete-it-and-re-run-vue-cli-in-manual-mode"><a href="#error-vuerc-may-be-outdated-Please-delete-it-and-re-run-vue-cli-in-manual-mode" class="headerlink" title="error: ~/.vuerc may be outdated. Please delete it and re-run vue-cli in manual mode"></a>error: ~/.vuerc may be outdated. Please delete it and re-run vue-cli in manual mode</h4><p>最近，尝试使用@vue/cli@4.0.5来构建项目，但是编译老是出错。不得已换回了@3.0版本。降低版本后，vue create <new project>会报错。<br><img src="/images/vueError2.png" alt="vue error"><br><strong>解决办法：</strong><br>windows系统中’C:\Users\Administrator’里面有个.vuerc 文件。手动删除后，重新创建项目，问题解决。</new></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外边距叠加</title>
      <link href="2019/06/19/%E5%A4%96%E8%BE%B9%E8%B7%9Dmargin%E5%8F%A0%E5%8A%A0/"/>
      <url>2019/06/19/%E5%A4%96%E8%BE%B9%E8%B7%9Dmargin%E5%8F%A0%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p>在<em>普通文档流</em>中，<em>块框 垂直的</em>两个外边距margin<em>直接接触</em>会发生叠加，形成一个外边距。 叠加后的margin取两者中的<em>较大值</em>。</p><h3 id="一、外边距叠加需要的条件："><a href="#一、外边距叠加需要的条件：" class="headerlink" title="一、外边距叠加需要的条件："></a>一、外边距叠加需要的条件：</h3><ol><li>普通文档流；                                                </li><li>块框；</li><li>垂直方向上；   </li><li>外边距margin直接接触；</li></ol><p>所以在行内框，浮动框或者绝对定位框之间的外边距并不会叠加,水平方向上的margin-left和margin-right也不会发生叠加。</p><h3 id="二、外边距叠加具体的几种情况："><a href="#二、外边距叠加具体的几种情况：" class="headerlink" title="二、外边距叠加具体的几种情况："></a>二、外边距叠加具体的几种情况：</h3><ol><li><p>一个元素出现在另一个元素<em>上面</em>时，垂直外边距会发生叠加；如下图演示：</p><iframe src="/pages/margin-demo1/" width="100%" height="300px" frameborder="0" allowfullscreen></iframe></li><li><p>一个元素出现在另一个元素<em>内部</em>时，垂直外边距会发生叠加；如下图演示：</p><iframe src="/pages/margin-demo2/" width="100%" height="350px" frameborder="0" allowfullscreen></iframe></li><li><p>当一个元素border,padding,height同时为0时，<em>元素本身</em>的margin-top和margin-bottom也会发生叠加；如下图演示：</p><iframe src="/pages/margin-demo3/" width="100%" height="210px" frameborder="0" allowfullscreen></iframe></li></ol><h3 id="内边距padding不会发生叠加"><a href="#内边距padding不会发生叠加" class="headerlink" title="内边距padding不会发生叠加"></a>内边距<em>padding</em>不会发生叠加</h3>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 外边距 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
